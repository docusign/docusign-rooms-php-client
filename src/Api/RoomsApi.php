<?php
declare(strict_types=1);

/**
 * RoomsApi.
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  DocuSign\Rooms
 * @author   Swagger Codegen team <apihelp@docusign.com>
 * @license  The DocuSign PHP Client SDK is licensed under the MIT License.
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * DocuSign Rooms API - v2
 *
 * An API for an integrator to access the features of DocuSign Rooms
 *
 * OpenAPI spec version: v2
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace DocuSign\Rooms\Api\RoomsApi;


/**
 * GetAssignableRolesOptions Class Doc Comment
 *
 * @category Class
 * @package  DocuSign\Rooms
 * @author   Swagger Codegen team <apihelp@docusign.com>
 * @license  The DocuSign PHP Client SDK is licensed under the MIT License.
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GetAssignableRolesOptions
{
    /**
      * $assignee_email Optional parameter indicating to only return roles (internal/external) assignable to this user.
      * @var ?string
      */
    protected ?string $assignee_email = null;

    /**
     * Gets assignee_email
     *
     * @return ?string
     */
    public function getAssigneeEmail(): ?string
    {
        return $this->assignee_email;
    }

    /**
     * Sets assignee_email
     * @param ?string $assignee_email Optional parameter indicating to only return roles (internal/external) assignable to this user.
     *
     * @return self
     */
    public function setAssigneeEmail(?string $assignee_email): self
    {
        $this->assignee_email = $assignee_email;
        return $this;
    }
    /**
      * $filter A search filter that returns assignable roles by the beginning of the role name.
      * @var ?string
      */
    protected ?string $filter = null;

    /**
     * Gets filter
     *
     * @return ?string
     */
    public function getFilter(): ?string
    {
        return $this->filter;
    }

    /**
     * Sets filter
     * @param ?string $filter A search filter that returns assignable roles by the beginning of the role name.
     *
     * @return self
     */
    public function setFilter(?string $filter): self
    {
        $this->filter = $filter;
        return $this;
    }
    /**
      * $start_position The index position within the total result set from which to start returning values. The default value is `0`.
      * @var ?int
      */
    protected ?int $start_position = null;

    /**
     * Gets start_position
     *
     * @return ?int
     */
    public function getStartPosition(): ?int
    {
        return $this->start_position;
    }

    /**
     * Sets start_position
     * @param ?int $start_position The index position within the total result set from which to start returning values. The default value is `0`.
     *
     * @return self
     */
    public function setStartPosition(?int $start_position): self
    {
        $this->start_position = $start_position;
        return $this;
    }
    /**
      * $count The number of results to return. This value must be a number between `1` and `100` (default).
      * @var ?int
      */
    protected ?int $count = null;

    /**
     * Gets count
     *
     * @return ?int
     */
    public function getCount(): ?int
    {
        return $this->count;
    }

    /**
     * Sets count
     * @param ?int $count The number of results to return. This value must be a number between `1` and `100` (default).
     *
     * @return self
     */
    public function setCount(?int $count): self
    {
        $this->count = $count;
        return $this;
    }
}


/**
 * GetDocumentsOptions Class Doc Comment
 *
 * @category Class
 * @package  DocuSign\Rooms
 * @author   Swagger Codegen team <apihelp@docusign.com>
 * @license  The DocuSign PHP Client SDK is licensed under the MIT License.
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GetDocumentsOptions
{
    /**
      * $count Number of documents to return. Defaults to the maximum which is 100.
      * @var ?int
      */
    protected ?int $count = null;

    /**
     * Gets count
     *
     * @return ?int
     */
    public function getCount(): ?int
    {
        return $this->count;
    }

    /**
     * Sets count
     * @param ?int $count Number of documents to return. Defaults to the maximum which is 100.
     *
     * @return self
     */
    public function setCount(?int $count): self
    {
        $this->count = $count;
        return $this;
    }
    /**
      * $start_position Position of the first item in the total results. Defaults to 0.
      * @var ?int
      */
    protected ?int $start_position = null;

    /**
     * Gets start_position
     *
     * @return ?int
     */
    public function getStartPosition(): ?int
    {
        return $this->start_position;
    }

    /**
     * Sets start_position
     * @param ?int $start_position Position of the first item in the total results. Defaults to 0.
     *
     * @return self
     */
    public function setStartPosition(?int $start_position): self
    {
        $this->start_position = $start_position;
        return $this;
    }
    /**
      * $require_content_for_dynamic_documents Filter out any isDynamic documents without content. Defaults to false.
      * @var ?bool
      */
    protected ?bool $require_content_for_dynamic_documents = null;

    /**
     * Gets require_content_for_dynamic_documents
     *
     * @return ?bool
     */
    public function getRequireContentForDynamicDocuments(): ?bool
    {
        return $this->require_content_for_dynamic_documents;
    }

    /**
     * Sets require_content_for_dynamic_documents
     * @param ?bool $require_content_for_dynamic_documents Filter out any isDynamic documents without content. Defaults to false.
     *
     * @return self
     */
    public function setRequireContentForDynamicDocuments(?bool $require_content_for_dynamic_documents): self
    {
        $this->require_content_for_dynamic_documents = $require_content_for_dynamic_documents;
        return $this;
    }
    /**
      * $room_folder_id Filter documents by folderId. Defaults to null, to not filter on folderId.
      * @var ?int
      */
    protected ?int $room_folder_id = null;

    /**
     * Gets room_folder_id
     *
     * @return ?int
     */
    public function getRoomFolderId(): ?int
    {
        return $this->room_folder_id;
    }

    /**
     * Sets room_folder_id
     * @param ?int $room_folder_id Filter documents by folderId. Defaults to null, to not filter on folderId.
     *
     * @return self
     */
    public function setRoomFolderId(?int $room_folder_id): self
    {
        $this->room_folder_id = $room_folder_id;
        return $this;
    }
    /**
      * $name_filter Filter documents where Name contains the filter. Defaults to null, to not filter.
      * @var ?string
      */
    protected ?string $name_filter = null;

    /**
     * Gets name_filter
     *
     * @return ?string
     */
    public function getNameFilter(): ?string
    {
        return $this->name_filter;
    }

    /**
     * Sets name_filter
     * @param ?string $name_filter Filter documents where Name contains the filter. Defaults to null, to not filter.
     *
     * @return self
     */
    public function setNameFilter(?string $name_filter): self
    {
        $this->name_filter = $name_filter;
        return $this;
    }
    /**
      * $include_archived Filter documents to have the same isArchived value as includeArchived. Defaults to true, to include archived documents.
      * @var ?bool
      */
    protected ?bool $include_archived = null;

    /**
     * Gets include_archived
     *
     * @return ?bool
     */
    public function getIncludeArchived(): ?bool
    {
        return $this->include_archived;
    }

    /**
     * Sets include_archived
     * @param ?bool $include_archived Filter documents to have the same isArchived value as includeArchived. Defaults to true, to include archived documents.
     *
     * @return self
     */
    public function setIncludeArchived(?bool $include_archived): self
    {
        $this->include_archived = $include_archived;
        return $this;
    }
}


/**
 * GetRoomOptions Class Doc Comment
 *
 * @category Class
 * @package  DocuSign\Rooms
 * @author   Swagger Codegen team <apihelp@docusign.com>
 * @license  The DocuSign PHP Client SDK is licensed under the MIT License.
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GetRoomOptions
{
    /**
      * $include_field_data Indicates if field data (a.k.a., room details) should be included in the response. Defaults to false.
      * @var ?bool
      */
    protected ?bool $include_field_data = null;

    /**
     * Gets include_field_data
     *
     * @return ?bool
     */
    public function getIncludeFieldData(): ?bool
    {
        return $this->include_field_data;
    }

    /**
     * Sets include_field_data
     * @param ?bool $include_field_data Indicates if field data (a.k.a., room details) should be included in the response. Defaults to false.
     *
     * @return self
     */
    public function setIncludeFieldData(?bool $include_field_data): self
    {
        $this->include_field_data = $include_field_data;
        return $this;
    }
}


/**
 * GetRoomUsersOptions Class Doc Comment
 *
 * @category Class
 * @package  DocuSign\Rooms
 * @author   Swagger Codegen team <apihelp@docusign.com>
 * @license  The DocuSign PHP Client SDK is licensed under the MIT License.
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GetRoomUsersOptions
{
    /**
      * $count Number of room users to return. Defaults to the maximum which is 100.
      * @var ?int
      */
    protected ?int $count = null;

    /**
     * Gets count
     *
     * @return ?int
     */
    public function getCount(): ?int
    {
        return $this->count;
    }

    /**
     * Sets count
     * @param ?int $count Number of room users to return. Defaults to the maximum which is 100.
     *
     * @return self
     */
    public function setCount(?int $count): self
    {
        $this->count = $count;
        return $this;
    }
    /**
      * $start_position Position of the first item in the total results. Defaults to 0.
      * @var ?int
      */
    protected ?int $start_position = null;

    /**
     * Gets start_position
     *
     * @return ?int
     */
    public function getStartPosition(): ?int
    {
        return $this->start_position;
    }

    /**
     * Sets start_position
     * @param ?int $start_position Position of the first item in the total results. Defaults to 0.
     *
     * @return self
     */
    public function setStartPosition(?int $start_position): self
    {
        $this->start_position = $start_position;
        return $this;
    }
    /**
      * $filter Returns room users filtered by Name and Email.
      * @var ?string
      */
    protected ?string $filter = null;

    /**
     * Gets filter
     *
     * @return ?string
     */
    public function getFilter(): ?string
    {
        return $this->filter;
    }

    /**
     * Sets filter
     * @param ?string $filter Returns room users filtered by Name and Email.
     *
     * @return self
     */
    public function setFilter(?string $filter): self
    {
        $this->filter = $filter;
        return $this;
    }
    /**
      * $sort Sorts results. Options are FirstNameAsc, FirstNameDesc, LastNameAsc, LastNameDesc, EmailAsc, EmailDesc. Defaults to LastNameDesc
      * @var ?string
      */
    protected ?string $sort = null;

    /**
     * Gets sort
     *
     * @return ?string
     */
    public function getSort(): ?string
    {
        return $this->sort;
    }

    /**
     * Sets sort
     * @param ?string $sort Sorts results. Options are FirstNameAsc, FirstNameDesc, LastNameAsc, LastNameDesc, EmailAsc, EmailDesc. Defaults to LastNameDesc
     *
     * @return self
     */
    public function setSort(?string $sort): self
    {
        $this->sort = $sort;
        return $this;
    }
}


/**
 * GetRoomsOptions Class Doc Comment
 *
 * @category Class
 * @package  DocuSign\Rooms
 * @author   Swagger Codegen team <apihelp@docusign.com>
 * @license  The DocuSign PHP Client SDK is licensed under the MIT License.
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GetRoomsOptions
{
    /**
      * $count Number of rooms to return. Defaults to the maximum which is 100.
      * @var ?int
      */
    protected ?int $count = null;

    /**
     * Gets count
     *
     * @return ?int
     */
    public function getCount(): ?int
    {
        return $this->count;
    }

    /**
     * Sets count
     * @param ?int $count Number of rooms to return. Defaults to the maximum which is 100.
     *
     * @return self
     */
    public function setCount(?int $count): self
    {
        $this->count = $count;
        return $this;
    }
    /**
      * $start_position Position of the first item in the total results. Defaults to 0.
      * @var ?int
      */
    protected ?int $start_position = null;

    /**
     * Gets start_position
     *
     * @return ?int
     */
    public function getStartPosition(): ?int
    {
        return $this->start_position;
    }

    /**
     * Sets start_position
     * @param ?int $start_position Position of the first item in the total results. Defaults to 0.
     *
     * @return self
     */
    public function setStartPosition(?int $start_position): self
    {
        $this->start_position = $start_position;
        return $this;
    }
    /**
      * $room_status Status of the rooms to return. Defaults to \"Active\".
      * @var ?string
      */
    protected ?string $room_status = null;

    /**
     * Gets room_status
     *
     * @return ?string
     */
    public function getRoomStatus(): ?string
    {
        return $this->room_status;
    }

    /**
     * Sets room_status
     * @param ?string $room_status Status of the rooms to return. Defaults to \"Active\".
     *
     * @return self
     */
    public function setRoomStatus(?string $room_status): self
    {
        $this->room_status = $room_status;
        return $this;
    }
    /**
      * $office_id Only return rooms in this office.
      * @var ?int
      */
    protected ?int $office_id = null;

    /**
     * Gets office_id
     *
     * @return ?int
     */
    public function getOfficeId(): ?int
    {
        return $this->office_id;
    }

    /**
     * Sets office_id
     * @param ?int $office_id Only return rooms in this office.
     *
     * @return self
     */
    public function setOfficeId(?int $office_id): self
    {
        $this->office_id = $office_id;
        return $this;
    }
    /**
      * $field_data_changed_start_date Fields data changed start datetime in UTC. Valid formats: yyyy-mm-dd hh:mm:ss or yyyy/mm/dd hh:mm:ss -Time is optional and will default to 00:00:00.
      * @var ?string
      */
    protected ?string $field_data_changed_start_date = null;

    /**
     * Gets field_data_changed_start_date
     *
     * @return ?string
     */
    public function getFieldDataChangedStartDate(): ?string
    {
        return $this->field_data_changed_start_date;
    }

    /**
     * Sets field_data_changed_start_date
     * @param ?string $field_data_changed_start_date Fields data changed start datetime in UTC. Valid formats: yyyy-mm-dd hh:mm:ss or yyyy/mm/dd hh:mm:ss -Time is optional and will default to 00:00:00.
     *
     * @return self
     */
    public function setFieldDataChangedStartDate(?string $field_data_changed_start_date): self
    {
        $this->field_data_changed_start_date = $field_data_changed_start_date;
        return $this;
    }
    /**
      * $field_data_changed_end_date Fields-data changed end DateTime in UTC. Valid formats: yyyy-mm-dd hh:mm:ss or yyyy/mm/dd hh:mm:ss -Time is optional and will default to 00:00:00.
      * @var ?string
      */
    protected ?string $field_data_changed_end_date = null;

    /**
     * Gets field_data_changed_end_date
     *
     * @return ?string
     */
    public function getFieldDataChangedEndDate(): ?string
    {
        return $this->field_data_changed_end_date;
    }

    /**
     * Sets field_data_changed_end_date
     * @param ?string $field_data_changed_end_date Fields-data changed end DateTime in UTC. Valid formats: yyyy-mm-dd hh:mm:ss or yyyy/mm/dd hh:mm:ss -Time is optional and will default to 00:00:00.
     *
     * @return self
     */
    public function setFieldDataChangedEndDate(?string $field_data_changed_end_date): self
    {
        $this->field_data_changed_end_date = $field_data_changed_end_date;
        return $this;
    }
    /**
      * $room_closed_start_date Room closed start datetime in UTC. Valid formats: yyyy-mm-dd hh:mm:ss or yyyy/mm/dd hh:mm:ss -Time is optional and will default to 00:00:00.
      * @var ?string
      */
    protected ?string $room_closed_start_date = null;

    /**
     * Gets room_closed_start_date
     *
     * @return ?string
     */
    public function getRoomClosedStartDate(): ?string
    {
        return $this->room_closed_start_date;
    }

    /**
     * Sets room_closed_start_date
     * @param ?string $room_closed_start_date Room closed start datetime in UTC. Valid formats: yyyy-mm-dd hh:mm:ss or yyyy/mm/dd hh:mm:ss -Time is optional and will default to 00:00:00.
     *
     * @return self
     */
    public function setRoomClosedStartDate(?string $room_closed_start_date): self
    {
        $this->room_closed_start_date = $room_closed_start_date;
        return $this;
    }
    /**
      * $room_closed_end_date Room closed end datetime in UTC. Valid formats: yyyy-mm-dd hh:mm:ss or yyyy/mm/dd hh:mm:ss -Time is optional and will default to 00:00:00.
      * @var ?string
      */
    protected ?string $room_closed_end_date = null;

    /**
     * Gets room_closed_end_date
     *
     * @return ?string
     */
    public function getRoomClosedEndDate(): ?string
    {
        return $this->room_closed_end_date;
    }

    /**
     * Sets room_closed_end_date
     * @param ?string $room_closed_end_date Room closed end datetime in UTC. Valid formats: yyyy-mm-dd hh:mm:ss or yyyy/mm/dd hh:mm:ss -Time is optional and will default to 00:00:00.
     *
     * @return self
     */
    public function setRoomClosedEndDate(?string $room_closed_end_date): self
    {
        $this->room_closed_end_date = $room_closed_end_date;
        return $this;
    }
}



namespace DocuSign\Rooms\Api;

use DocuSign\Rooms\Client\ApiClient;
use DocuSign\Rooms\Client\ApiException;
use DocuSign\Rooms\Configuration;
use DocuSign\Rooms\ObjectSerializer;

/**
 * RoomsApi Class Doc Comment
 *
 * @category Class
 * @package  DocuSign\Rooms
 * @author   Swagger Codegen team <apihelp@docusign.com>
 * @license  The DocuSign PHP Client SDK is licensed under the MIT License.
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RoomsApi
{
    /**
     * API Client
     *
     * @var ApiClient instance of the ApiClient
     */
    protected ApiClient $apiClient;

    /**
     * Constructor
     *
     * @param ApiClient|null $apiClient The api client to use
     *
     * @return void
     */
    public function __construct(ApiClient $apiClient = null)
    {
        $this->apiClient = $apiClient ?? new ApiClient();
    }

    /**
     * Get API client
     *
     * @return ApiClient get the API client
     */
    public function getApiClient(): ApiClient
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param ApiClient $apiClient set the API client
     *
     * @return self
     */
    public function setApiClient(ApiClient $apiClient): self
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
    * Update $resourcePath with $
    *
    * @param string $resourcePath the resource path to use
    * @param string $baseName the base name param
    * @param string $paramName the parameter name
    *
    * @return string
    */
    public function updateResourcePath(string $resourcePath, string $baseName, string $paramName): string
    {
        return str_replace(
            "{" . $baseName . "}",
            $this->apiClient->getSerializer()->toPathValue($paramName),
            $resourcePath
        );
    }


    /**
     * Operation addDocumentToRoom
     *
     * Add a document to a room.
     *
     * @param ?int $room_id The id of the room.
     * @param ?string $account_id (Required) The globally unique identifier (GUID) for the account.
     * @param \DocuSign\Rooms\Model\Document $body Document details to be added (optional)
     *
     * @throws ApiException on non-2xx response
     * @return \DocuSign\Rooms\Model\RoomDocument
     */
    public function addDocumentToRoom($room_id, $account_id, $body = null)
    {
        list($response) = $this->addDocumentToRoomWithHttpInfo($room_id, $account_id, $body);
        return $response;
    }

    /**
     * Operation addDocumentToRoomWithHttpInfo
     *
     * Add a document to a room.
     *
     * @param ?int $room_id The id of the room.
     * @param ?string $account_id (Required) The globally unique identifier (GUID) for the account.
     * @param \DocuSign\Rooms\Model\Document $body Document details to be added (optional)
     *
     * @throws ApiException on non-2xx response
     * @return array of \DocuSign\Rooms\Model\RoomDocument, HTTP status code, HTTP response headers (array of strings)
     */
    public function addDocumentToRoomWithHttpInfo($room_id, $account_id, $body = null): array
    {
        // verify the required parameter 'room_id' is set
        if ($room_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $room_id when calling addDocumentToRoom');
        }
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling addDocumentToRoom');
        }
        // parse inputs
        $resourcePath = "/v2/accounts/{accountId}/rooms/{roomId}/documents";
        $httpBody = $_tempBody ?? ''; // $_tempBody is the method argument, if present
        $queryParams = $headerParams = $formParams = [];
        $headerParams['Accept'] ??= $this->apiClient->selectHeaderAccept(['text/plain', 'application/json', 'text/json', 'application/xml', 'text/xml']);
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json', 'application/xml', 'text/xml', 'application/_*+xml']);


        // path params
        if ($room_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "roomId", $room_id);
        }
        // path params
        if ($account_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "accountId", $account_id);
        }

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DocuSign\Rooms\Model\RoomDocument',
                '/v2/accounts/{accountId}/rooms/{roomId}/documents'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DocuSign\Rooms\Model\RoomDocument', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Rooms\Model\RoomDocument', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Rooms\Model\ApiError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Rooms\Model\ApiError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation addDocumentToRoomViaFileUpload
     *
     * Add a document to a room via file contents upload.
     *
     * @param ?int $room_id The id of the room.
     * @param ?string $account_id (Required) The globally unique identifier (GUID) for the account.
    * @param \SplFileObject $file File to be uploaded (optional)
     *
     * @throws ApiException on non-2xx response
     * @return \DocuSign\Rooms\Model\RoomDocument
     */
    public function addDocumentToRoomViaFileUpload($room_id, $account_id, $file)
    {
        list($response) = $this->addDocumentToRoomViaFileUploadWithHttpInfo($room_id, $account_id, $file);
        return $response;
    }

    /**
     * Operation addDocumentToRoomViaFileUploadWithHttpInfo
     *
     * Add a document to a room via file contents upload.
     *
     * @param ?int $room_id The id of the room.
     * @param ?string $account_id (Required) The globally unique identifier (GUID) for the account.
    * @param \SplFileObject $file File to be uploaded (optional)
     *
     * @throws ApiException on non-2xx response
     * @return array of \DocuSign\Rooms\Model\RoomDocument, HTTP status code, HTTP response headers (array of strings)
     */
    public function addDocumentToRoomViaFileUploadWithHttpInfo($room_id, $account_id, $file): array
    {
        // verify the required parameter 'room_id' is set
        if ($room_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $room_id when calling addDocumentToRoomViaFileUpload');
        }
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling addDocumentToRoomViaFileUpload');
        }
        // parse inputs
        $resourcePath = "/v2/accounts/{accountId}/rooms/{roomId}/documents/contents";
        $httpBody = $_tempBody ?? ''; // $_tempBody is the method argument, if present
        $queryParams = $headerParams = $formParams = [];
        $headerParams['Accept'] ??= $this->apiClient->selectHeaderAccept(['text/plain', 'application/json', 'text/json', 'application/xml', 'text/xml']);
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['multipart/form-data']);


        // path params
        if ($room_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "roomId", $room_id);
        }
        // path params
        if ($account_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "accountId", $account_id);
        }

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        // form params
        if ($file !== null) {
            // PHP 5.5 introduced a CurlFile object that deprecates the old @filename syntax
            // See: https://wiki.php.net/rfc/curl-file-upload
            if (function_exists('curl_file_create')) {
                $formParams['file'] = curl_file_create($this->apiClient->getSerializer()->toFormValue($file));
            } else {
                $formParams['file'] = '@' . $this->apiClient->getSerializer()->toFormValue($file);
            }
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DocuSign\Rooms\Model\RoomDocument',
                '/v2/accounts/{accountId}/rooms/{roomId}/documents/contents'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DocuSign\Rooms\Model\RoomDocument', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Rooms\Model\RoomDocument', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Rooms\Model\ApiError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Rooms\Model\ApiError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation addFormToRoom
     *
     * Adds a DocuSign Form to a room
     *
     * @param ?int $room_id Id of the room to which the DocuSign Form is being added
     * @param ?string $account_id (Required) The globally unique identifier (GUID) for the account.
     * @param \DocuSign\Rooms\Model\FormForAdd $body Contains information about the form being added (optional)
     *
     * @throws ApiException on non-2xx response
     * @return \DocuSign\Rooms\Model\RoomDocument
     */
    public function addFormToRoom($room_id, $account_id, $body = null)
    {
        list($response) = $this->addFormToRoomWithHttpInfo($room_id, $account_id, $body);
        return $response;
    }

    /**
     * Operation addFormToRoomWithHttpInfo
     *
     * Adds a DocuSign Form to a room
     *
     * @param ?int $room_id Id of the room to which the DocuSign Form is being added
     * @param ?string $account_id (Required) The globally unique identifier (GUID) for the account.
     * @param \DocuSign\Rooms\Model\FormForAdd $body Contains information about the form being added (optional)
     *
     * @throws ApiException on non-2xx response
     * @return array of \DocuSign\Rooms\Model\RoomDocument, HTTP status code, HTTP response headers (array of strings)
     */
    public function addFormToRoomWithHttpInfo($room_id, $account_id, $body = null): array
    {
        // verify the required parameter 'room_id' is set
        if ($room_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $room_id when calling addFormToRoom');
        }
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling addFormToRoom');
        }
        // parse inputs
        $resourcePath = "/v2/accounts/{accountId}/rooms/{roomId}/forms";
        $httpBody = $_tempBody ?? ''; // $_tempBody is the method argument, if present
        $queryParams = $headerParams = $formParams = [];
        $headerParams['Accept'] ??= $this->apiClient->selectHeaderAccept(['text/plain', 'application/json', 'text/json', 'application/xml', 'text/xml']);
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json', 'application/xml', 'text/xml', 'application/_*+xml']);


        // path params
        if ($room_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "roomId", $room_id);
        }
        // path params
        if ($account_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "accountId", $account_id);
        }

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DocuSign\Rooms\Model\RoomDocument',
                '/v2/accounts/{accountId}/rooms/{roomId}/forms'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DocuSign\Rooms\Model\RoomDocument', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Rooms\Model\RoomDocument', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Rooms\Model\RoomDocument', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Rooms\Model\ApiError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Rooms\Model\ApiError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation createRoom
     *
     * Creates a new Room
     *
     * @param ?string $account_id (Required) The globally unique identifier (GUID) for the account.
     * @param \DocuSign\Rooms\Model\RoomForCreate $body The properties of the new room (optional)
     *
     * @throws ApiException on non-2xx response
     * @return \DocuSign\Rooms\Model\Room
     */
    public function createRoom($account_id, $body = null)
    {
        list($response) = $this->createRoomWithHttpInfo($account_id, $body);
        return $response;
    }

    /**
     * Operation createRoomWithHttpInfo
     *
     * Creates a new Room
     *
     * @param ?string $account_id (Required) The globally unique identifier (GUID) for the account.
     * @param \DocuSign\Rooms\Model\RoomForCreate $body The properties of the new room (optional)
     *
     * @throws ApiException on non-2xx response
     * @return array of \DocuSign\Rooms\Model\Room, HTTP status code, HTTP response headers (array of strings)
     */
    public function createRoomWithHttpInfo($account_id, $body = null): array
    {
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling createRoom');
        }
        // parse inputs
        $resourcePath = "/v2/accounts/{accountId}/rooms";
        $httpBody = $_tempBody ?? ''; // $_tempBody is the method argument, if present
        $queryParams = $headerParams = $formParams = [];
        $headerParams['Accept'] ??= $this->apiClient->selectHeaderAccept(['text/plain', 'application/json', 'text/json', 'application/xml', 'text/xml']);
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']);


        // path params
        if ($account_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "accountId", $account_id);
        }

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DocuSign\Rooms\Model\Room',
                '/v2/accounts/{accountId}/rooms'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DocuSign\Rooms\Model\Room', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Rooms\Model\Room', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Rooms\Model\ApiError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Rooms\Model\ApiError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteRoom
     *
     * Deletes the room having the given room ID.
     *
     * @param ?int $room_id ID of the room to be deleted.
     * @param ?string $account_id (Required) The globally unique identifier (GUID) for the account.
     *
     * @throws ApiException on non-2xx response
     * @return mixed
     */
    public function deleteRoom($room_id, $account_id)
    {
        list($response) = $this->deleteRoomWithHttpInfo($room_id, $account_id);
        return $response;
    }

    /**
     * Operation deleteRoomWithHttpInfo
     *
     * Deletes the room having the given room ID.
     *
     * @param ?int $room_id ID of the room to be deleted.
     * @param ?string $account_id (Required) The globally unique identifier (GUID) for the account.
     *
     * @throws ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteRoomWithHttpInfo($room_id, $account_id): array
    {
        // verify the required parameter 'room_id' is set
        if ($room_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $room_id when calling deleteRoom');
        }
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling deleteRoom');
        }
        // parse inputs
        $resourcePath = "/v2/accounts/{accountId}/rooms/{roomId}";
        $httpBody = $_tempBody ?? ''; // $_tempBody is the method argument, if present
        $queryParams = $headerParams = $formParams = [];
        $headerParams['Accept'] ??= $this->apiClient->selectHeaderAccept(['text/plain', 'application/json', 'text/json', 'application/xml', 'text/xml']);
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']);


        // path params
        if ($room_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "roomId", $room_id);
        }
        // path params
        if ($account_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "accountId", $account_id);
        }

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/v2/accounts/{accountId}/rooms/{roomId}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Rooms\Model\ApiError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Rooms\Model\ApiError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getAssignableRoles
     *
     * Returns the roles for which the calling user, based on their role within the room, can assign to invitees.
     *
     * @param ?int $room_id The id of the room.
     * @param ?string $account_id (Required) The globally unique identifier (GUID) for the account.
     * @param  \DocuSign\Rooms\Api\RoomsApi\GetAssignableRolesOptions  $options for modifying the behavior of the function. (optional)
     *
     * @throws ApiException on non-2xx response
     * @return \DocuSign\Rooms\Model\AssignableRoles
     */
    public function getAssignableRoles($room_id, $account_id, \DocuSign\Rooms\Api\RoomsApi\GetAssignableRolesOptions $options = null)
    {
        list($response) = $this->getAssignableRolesWithHttpInfo($room_id, $account_id, $options);
        return $response;
    }

    /**
     * Operation getAssignableRolesWithHttpInfo
     *
     * Returns the roles for which the calling user, based on their role within the room, can assign to invitees.
     *
     * @param ?int $room_id The id of the room.
     * @param ?string $account_id (Required) The globally unique identifier (GUID) for the account.
     * @param  \DocuSign\Rooms\Api\RoomsApi\GetAssignableRolesOptions  $options for modifying the behavior of the function. (optional)
     *
     * @throws ApiException on non-2xx response
     * @return array of \DocuSign\Rooms\Model\AssignableRoles, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAssignableRolesWithHttpInfo($room_id, $account_id, \DocuSign\Rooms\Api\RoomsApi\GetAssignableRolesOptions $options = null): array
    {
        // verify the required parameter 'room_id' is set
        if ($room_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $room_id when calling getAssignableRoles');
        }
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling getAssignableRoles');
        }
        // parse inputs
        $resourcePath = "/v2/accounts/{accountId}/rooms/{roomId}/assignable_roles";
        $httpBody = $_tempBody ?? ''; // $_tempBody is the method argument, if present
        $queryParams = $headerParams = $formParams = [];
        $headerParams['Accept'] ??= $this->apiClient->selectHeaderAccept(['text/plain', 'application/json', 'text/json', 'application/xml', 'text/xml']);
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']);

        if ($options != null)
        {
            // query params
            if ($options->getAssigneeEmail() != 'null') {
                $queryParams['assigneeEmail'] = $this->apiClient->getSerializer()->toQueryValue($options->getAssigneeEmail());
            }
            if ($options->getFilter() != 'null') {
                $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($options->getFilter());
            }
            if ($options->getStartPosition() != 'null') {
                $queryParams['startPosition'] = $this->apiClient->getSerializer()->toQueryValue($options->getStartPosition());
            }
            if ($options->getCount() != 'null') {
                $queryParams['count'] = $this->apiClient->getSerializer()->toQueryValue($options->getCount());
            }
        }

        // path params
        if ($room_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "roomId", $room_id);
        }
        // path params
        if ($account_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "accountId", $account_id);
        }

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DocuSign\Rooms\Model\AssignableRoles',
                '/v2/accounts/{accountId}/rooms/{roomId}/assignable_roles'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DocuSign\Rooms\Model\AssignableRoles', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Rooms\Model\AssignableRoles', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Rooms\Model\ApiError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Rooms\Model\ApiError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getDocuments
     *
     * Get documents in the room accessible to the calling user.
     *
     * @param ?int $room_id The id of the room.
     * @param ?string $account_id (Required) The globally unique identifier (GUID) for the account.
     * @param  \DocuSign\Rooms\Api\RoomsApi\GetDocumentsOptions  $options for modifying the behavior of the function. (optional)
     *
     * @throws ApiException on non-2xx response
     * @return \DocuSign\Rooms\Model\RoomDocumentList
     */
    public function getDocuments($room_id, $account_id, \DocuSign\Rooms\Api\RoomsApi\GetDocumentsOptions $options = null)
    {
        list($response) = $this->getDocumentsWithHttpInfo($room_id, $account_id, $options);
        return $response;
    }

    /**
     * Operation getDocumentsWithHttpInfo
     *
     * Get documents in the room accessible to the calling user.
     *
     * @param ?int $room_id The id of the room.
     * @param ?string $account_id (Required) The globally unique identifier (GUID) for the account.
     * @param  \DocuSign\Rooms\Api\RoomsApi\GetDocumentsOptions  $options for modifying the behavior of the function. (optional)
     *
     * @throws ApiException on non-2xx response
     * @return array of \DocuSign\Rooms\Model\RoomDocumentList, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDocumentsWithHttpInfo($room_id, $account_id, \DocuSign\Rooms\Api\RoomsApi\GetDocumentsOptions $options = null): array
    {
        // verify the required parameter 'room_id' is set
        if ($room_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $room_id when calling getDocuments');
        }
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling getDocuments');
        }
        // parse inputs
        $resourcePath = "/v2/accounts/{accountId}/rooms/{roomId}/documents";
        $httpBody = $_tempBody ?? ''; // $_tempBody is the method argument, if present
        $queryParams = $headerParams = $formParams = [];
        $headerParams['Accept'] ??= $this->apiClient->selectHeaderAccept(['text/plain', 'application/json', 'text/json', 'application/xml', 'text/xml']);
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']);

        if ($options != null)
        {
            // query params
            if ($options->getCount() != 'null') {
                $queryParams['count'] = $this->apiClient->getSerializer()->toQueryValue($options->getCount());
            }
            if ($options->getStartPosition() != 'null') {
                $queryParams['startPosition'] = $this->apiClient->getSerializer()->toQueryValue($options->getStartPosition());
            }
            if ($options->getRequireContentForDynamicDocuments() != 'null') {
                $queryParams['requireContentForDynamicDocuments'] = $this->apiClient->getSerializer()->toQueryValue($options->getRequireContentForDynamicDocuments());
            }
            if ($options->getRoomFolderId() != 'null') {
                $queryParams['roomFolderId'] = $this->apiClient->getSerializer()->toQueryValue($options->getRoomFolderId());
            }
            if ($options->getNameFilter() != 'null') {
                $queryParams['nameFilter'] = $this->apiClient->getSerializer()->toQueryValue($options->getNameFilter());
            }
            if ($options->getIncludeArchived() != 'null') {
                $queryParams['includeArchived'] = $this->apiClient->getSerializer()->toQueryValue($options->getIncludeArchived());
            }
        }

        // path params
        if ($room_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "roomId", $room_id);
        }
        // path params
        if ($account_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "accountId", $account_id);
        }

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DocuSign\Rooms\Model\RoomDocumentList',
                '/v2/accounts/{accountId}/rooms/{roomId}/documents'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DocuSign\Rooms\Model\RoomDocumentList', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Rooms\Model\RoomDocumentList', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Rooms\Model\ApiError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Rooms\Model\ApiError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getRoom
     *
     * Gets information about the given room.
     *
     * @param ?int $room_id The id of the room.
     * @param ?string $account_id (Required) The globally unique identifier (GUID) for the account.
     * @param  \DocuSign\Rooms\Api\RoomsApi\GetRoomOptions  $options for modifying the behavior of the function. (optional)
     *
     * @throws ApiException on non-2xx response
     * @return \DocuSign\Rooms\Model\Room
     */
    public function getRoom($room_id, $account_id, \DocuSign\Rooms\Api\RoomsApi\GetRoomOptions $options = null)
    {
        list($response) = $this->getRoomWithHttpInfo($room_id, $account_id, $options);
        return $response;
    }

    /**
     * Operation getRoomWithHttpInfo
     *
     * Gets information about the given room.
     *
     * @param ?int $room_id The id of the room.
     * @param ?string $account_id (Required) The globally unique identifier (GUID) for the account.
     * @param  \DocuSign\Rooms\Api\RoomsApi\GetRoomOptions  $options for modifying the behavior of the function. (optional)
     *
     * @throws ApiException on non-2xx response
     * @return array of \DocuSign\Rooms\Model\Room, HTTP status code, HTTP response headers (array of strings)
     */
    public function getRoomWithHttpInfo($room_id, $account_id, \DocuSign\Rooms\Api\RoomsApi\GetRoomOptions $options = null): array
    {
        // verify the required parameter 'room_id' is set
        if ($room_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $room_id when calling getRoom');
        }
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling getRoom');
        }
        // parse inputs
        $resourcePath = "/v2/accounts/{accountId}/rooms/{roomId}";
        $httpBody = $_tempBody ?? ''; // $_tempBody is the method argument, if present
        $queryParams = $headerParams = $formParams = [];
        $headerParams['Accept'] ??= $this->apiClient->selectHeaderAccept(['text/plain', 'application/json', 'text/json', 'application/xml', 'text/xml']);
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']);

        if ($options != null)
        {
            // query params
            if ($options->getIncludeFieldData() != 'null') {
                $queryParams['includeFieldData'] = $this->apiClient->getSerializer()->toQueryValue($options->getIncludeFieldData());
            }
        }

        // path params
        if ($room_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "roomId", $room_id);
        }
        // path params
        if ($account_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "accountId", $account_id);
        }

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DocuSign\Rooms\Model\Room',
                '/v2/accounts/{accountId}/rooms/{roomId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DocuSign\Rooms\Model\Room', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Rooms\Model\Room', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Rooms\Model\ApiError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Rooms\Model\ApiError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getRoomFieldData
     *
     * Returns the FieldData associated with the provided roomId.
     *
     * @param ?int $room_id The id of the room.
     * @param ?string $account_id (Required) The globally unique identifier (GUID) for the account.
     *
     * @throws ApiException on non-2xx response
     * @return \DocuSign\Rooms\Model\FieldData
     */
    public function getRoomFieldData($room_id, $account_id)
    {
        list($response) = $this->getRoomFieldDataWithHttpInfo($room_id, $account_id);
        return $response;
    }

    /**
     * Operation getRoomFieldDataWithHttpInfo
     *
     * Returns the FieldData associated with the provided roomId.
     *
     * @param ?int $room_id The id of the room.
     * @param ?string $account_id (Required) The globally unique identifier (GUID) for the account.
     *
     * @throws ApiException on non-2xx response
     * @return array of \DocuSign\Rooms\Model\FieldData, HTTP status code, HTTP response headers (array of strings)
     */
    public function getRoomFieldDataWithHttpInfo($room_id, $account_id): array
    {
        // verify the required parameter 'room_id' is set
        if ($room_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $room_id when calling getRoomFieldData');
        }
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling getRoomFieldData');
        }
        // parse inputs
        $resourcePath = "/v2/accounts/{accountId}/rooms/{roomId}/field_data";
        $httpBody = $_tempBody ?? ''; // $_tempBody is the method argument, if present
        $queryParams = $headerParams = $formParams = [];
        $headerParams['Accept'] ??= $this->apiClient->selectHeaderAccept(['text/plain', 'application/json', 'text/json', 'application/xml', 'text/xml']);
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']);


        // path params
        if ($room_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "roomId", $room_id);
        }
        // path params
        if ($account_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "accountId", $account_id);
        }

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DocuSign\Rooms\Model\FieldData',
                '/v2/accounts/{accountId}/rooms/{roomId}/field_data'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DocuSign\Rooms\Model\FieldData', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Rooms\Model\FieldData', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Rooms\Model\ApiError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Rooms\Model\ApiError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getRoomFieldSet
     *
     * Gets the field set associated with the room.
     *
     * @param ?int $room_id The id of the room.
     * @param ?string $account_id (Required) The globally unique identifier (GUID) for the account.
     *
     * @throws ApiException on non-2xx response
     * @return \DocuSign\Rooms\Model\FieldSet
     */
    public function getRoomFieldSet($room_id, $account_id)
    {
        list($response) = $this->getRoomFieldSetWithHttpInfo($room_id, $account_id);
        return $response;
    }

    /**
     * Operation getRoomFieldSetWithHttpInfo
     *
     * Gets the field set associated with the room.
     *
     * @param ?int $room_id The id of the room.
     * @param ?string $account_id (Required) The globally unique identifier (GUID) for the account.
     *
     * @throws ApiException on non-2xx response
     * @return array of \DocuSign\Rooms\Model\FieldSet, HTTP status code, HTTP response headers (array of strings)
     */
    public function getRoomFieldSetWithHttpInfo($room_id, $account_id): array
    {
        // verify the required parameter 'room_id' is set
        if ($room_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $room_id when calling getRoomFieldSet');
        }
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling getRoomFieldSet');
        }
        // parse inputs
        $resourcePath = "/v2/accounts/{accountId}/rooms/{roomId}/field_set";
        $httpBody = $_tempBody ?? ''; // $_tempBody is the method argument, if present
        $queryParams = $headerParams = $formParams = [];
        $headerParams['Accept'] ??= $this->apiClient->selectHeaderAccept(['text/plain', 'application/json', 'text/json', 'application/xml', 'text/xml']);
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']);


        // path params
        if ($room_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "roomId", $room_id);
        }
        // path params
        if ($account_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "accountId", $account_id);
        }

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DocuSign\Rooms\Model\FieldSet',
                '/v2/accounts/{accountId}/rooms/{roomId}/field_set'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DocuSign\Rooms\Model\FieldSet', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Rooms\Model\FieldSet', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Rooms\Model\ApiError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Rooms\Model\ApiError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getRoomUsers
     *
     * Retrieves the list of users in the given room.
     *
     * @param ?int $room_id The id of the room.
     * @param ?string $account_id (Required) The globally unique identifier (GUID) for the account.
     * @param  \DocuSign\Rooms\Api\RoomsApi\GetRoomUsersOptions  $options for modifying the behavior of the function. (optional)
     *
     * @throws ApiException on non-2xx response
     * @return \DocuSign\Rooms\Model\RoomUsersResult
     */
    public function getRoomUsers($room_id, $account_id, \DocuSign\Rooms\Api\RoomsApi\GetRoomUsersOptions $options = null)
    {
        list($response) = $this->getRoomUsersWithHttpInfo($room_id, $account_id, $options);
        return $response;
    }

    /**
     * Operation getRoomUsersWithHttpInfo
     *
     * Retrieves the list of users in the given room.
     *
     * @param ?int $room_id The id of the room.
     * @param ?string $account_id (Required) The globally unique identifier (GUID) for the account.
     * @param  \DocuSign\Rooms\Api\RoomsApi\GetRoomUsersOptions  $options for modifying the behavior of the function. (optional)
     *
     * @throws ApiException on non-2xx response
     * @return array of \DocuSign\Rooms\Model\RoomUsersResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function getRoomUsersWithHttpInfo($room_id, $account_id, \DocuSign\Rooms\Api\RoomsApi\GetRoomUsersOptions $options = null): array
    {
        // verify the required parameter 'room_id' is set
        if ($room_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $room_id when calling getRoomUsers');
        }
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling getRoomUsers');
        }
        // parse inputs
        $resourcePath = "/v2/accounts/{accountId}/rooms/{roomId}/users";
        $httpBody = $_tempBody ?? ''; // $_tempBody is the method argument, if present
        $queryParams = $headerParams = $formParams = [];
        $headerParams['Accept'] ??= $this->apiClient->selectHeaderAccept(['text/plain', 'application/json', 'text/json', 'application/xml', 'text/xml']);
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']);

        if ($options != null)
        {
            // query params
            if ($options->getCount() != 'null') {
                $queryParams['count'] = $this->apiClient->getSerializer()->toQueryValue($options->getCount());
            }
            if ($options->getStartPosition() != 'null') {
                $queryParams['startPosition'] = $this->apiClient->getSerializer()->toQueryValue($options->getStartPosition());
            }
            if ($options->getFilter() != 'null') {
                $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($options->getFilter());
            }
            if ($options->getSort() != 'null') {
                $queryParams['sort'] = $this->apiClient->getSerializer()->toQueryValue($options->getSort());
            }
        }

        // path params
        if ($room_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "roomId", $room_id);
        }
        // path params
        if ($account_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "accountId", $account_id);
        }

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DocuSign\Rooms\Model\RoomUsersResult',
                '/v2/accounts/{accountId}/rooms/{roomId}/users'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DocuSign\Rooms\Model\RoomUsersResult', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Rooms\Model\RoomUsersResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Rooms\Model\ApiError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Rooms\Model\ApiError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getRooms
     *
     * Gets rooms available to the calling user.
     *
     * @param ?string $account_id (Required) The globally unique identifier (GUID) for the account.
     * @param  \DocuSign\Rooms\Api\RoomsApi\GetRoomsOptions  $options for modifying the behavior of the function. (optional)
     *
     * @throws ApiException on non-2xx response
     * @return \DocuSign\Rooms\Model\RoomSummaryList
     */
    public function getRooms($account_id, \DocuSign\Rooms\Api\RoomsApi\GetRoomsOptions $options = null)
    {
        list($response) = $this->getRoomsWithHttpInfo($account_id, $options);
        return $response;
    }

    /**
     * Operation getRoomsWithHttpInfo
     *
     * Gets rooms available to the calling user.
     *
     * @param ?string $account_id (Required) The globally unique identifier (GUID) for the account.
     * @param  \DocuSign\Rooms\Api\RoomsApi\GetRoomsOptions  $options for modifying the behavior of the function. (optional)
     *
     * @throws ApiException on non-2xx response
     * @return array of \DocuSign\Rooms\Model\RoomSummaryList, HTTP status code, HTTP response headers (array of strings)
     */
    public function getRoomsWithHttpInfo($account_id, \DocuSign\Rooms\Api\RoomsApi\GetRoomsOptions $options = null): array
    {
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling getRooms');
        }
        // parse inputs
        $resourcePath = "/v2/accounts/{accountId}/rooms";
        $httpBody = $_tempBody ?? ''; // $_tempBody is the method argument, if present
        $queryParams = $headerParams = $formParams = [];
        $headerParams['Accept'] ??= $this->apiClient->selectHeaderAccept(['text/plain', 'application/json', 'text/json', 'application/xml', 'text/xml']);
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']);

        if ($options != null)
        {
            // query params
            if ($options->getCount() != 'null') {
                $queryParams['count'] = $this->apiClient->getSerializer()->toQueryValue($options->getCount());
            }
            if ($options->getStartPosition() != 'null') {
                $queryParams['startPosition'] = $this->apiClient->getSerializer()->toQueryValue($options->getStartPosition());
            }
            if ($options->getRoomStatus() != 'null') {
                $queryParams['roomStatus'] = $this->apiClient->getSerializer()->toQueryValue($options->getRoomStatus());
            }
            if ($options->getOfficeId() != 'null') {
                $queryParams['officeId'] = $this->apiClient->getSerializer()->toQueryValue($options->getOfficeId());
            }
            if ($options->getFieldDataChangedStartDate() != 'null') {
                $queryParams['fieldDataChangedStartDate'] = $this->apiClient->getSerializer()->toQueryValue($options->getFieldDataChangedStartDate());
            }
            if ($options->getFieldDataChangedEndDate() != 'null') {
                $queryParams['fieldDataChangedEndDate'] = $this->apiClient->getSerializer()->toQueryValue($options->getFieldDataChangedEndDate());
            }
            if ($options->getRoomClosedStartDate() != 'null') {
                $queryParams['roomClosedStartDate'] = $this->apiClient->getSerializer()->toQueryValue($options->getRoomClosedStartDate());
            }
            if ($options->getRoomClosedEndDate() != 'null') {
                $queryParams['roomClosedEndDate'] = $this->apiClient->getSerializer()->toQueryValue($options->getRoomClosedEndDate());
            }
        }

        // path params
        if ($account_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "accountId", $account_id);
        }

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DocuSign\Rooms\Model\RoomSummaryList',
                '/v2/accounts/{accountId}/rooms'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DocuSign\Rooms\Model\RoomSummaryList', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Rooms\Model\RoomSummaryList', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Rooms\Model\ApiError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Rooms\Model\ApiError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation inviteUser
     *
     * Invites a user to the room by email address.
     *
     * @param ?int $room_id The id of the room.
     * @param ?string $account_id (Required) The globally unique identifier (GUID) for the account.
     * @param \DocuSign\Rooms\Model\RoomInvite $body Name, Email, Side, Role of the user being invited (optional)
     *
     * @throws ApiException on non-2xx response
     * @return \DocuSign\Rooms\Model\RoomInviteResponse
     */
    public function inviteUser($room_id, $account_id, $body = null)
    {
        list($response) = $this->inviteUserWithHttpInfo($room_id, $account_id, $body);
        return $response;
    }

    /**
     * Operation inviteUserWithHttpInfo
     *
     * Invites a user to the room by email address.
     *
     * @param ?int $room_id The id of the room.
     * @param ?string $account_id (Required) The globally unique identifier (GUID) for the account.
     * @param \DocuSign\Rooms\Model\RoomInvite $body Name, Email, Side, Role of the user being invited (optional)
     *
     * @throws ApiException on non-2xx response
     * @return array of \DocuSign\Rooms\Model\RoomInviteResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function inviteUserWithHttpInfo($room_id, $account_id, $body = null): array
    {
        // verify the required parameter 'room_id' is set
        if ($room_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $room_id when calling inviteUser');
        }
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling inviteUser');
        }
        // parse inputs
        $resourcePath = "/v2/accounts/{accountId}/rooms/{roomId}/users";
        $httpBody = $_tempBody ?? ''; // $_tempBody is the method argument, if present
        $queryParams = $headerParams = $formParams = [];
        $headerParams['Accept'] ??= $this->apiClient->selectHeaderAccept(['text/plain', 'application/json', 'text/json', 'application/xml', 'text/xml']);
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json', 'application/xml', 'text/xml', 'application/_*+xml']);


        // path params
        if ($room_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "roomId", $room_id);
        }
        // path params
        if ($account_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "accountId", $account_id);
        }

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DocuSign\Rooms\Model\RoomInviteResponse',
                '/v2/accounts/{accountId}/rooms/{roomId}/users'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DocuSign\Rooms\Model\RoomInviteResponse', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Rooms\Model\RoomInviteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Rooms\Model\RoomInviteResponse', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Rooms\Model\ApiError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Rooms\Model\ApiError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation putRoomUser
     *
     * Updates the specified user's role and transaction side.
     *
     * @param ?int $room_id The id of the room.
     * @param ?int $user_id The id of the user to update.
     * @param ?string $account_id (Required) The globally unique identifier (GUID) for the account.
     * @param \DocuSign\Rooms\Model\RoomUserForUpdate $body Updated Role and Side of the given user (optional)
     *
     * @throws ApiException on non-2xx response
     * @return \DocuSign\Rooms\Model\RoomUser
     */
    public function putRoomUser($room_id, $user_id, $account_id, $body = null)
    {
        list($response) = $this->putRoomUserWithHttpInfo($room_id, $user_id, $account_id, $body);
        return $response;
    }

    /**
     * Operation putRoomUserWithHttpInfo
     *
     * Updates the specified user's role and transaction side.
     *
     * @param ?int $room_id The id of the room.
     * @param ?int $user_id The id of the user to update.
     * @param ?string $account_id (Required) The globally unique identifier (GUID) for the account.
     * @param \DocuSign\Rooms\Model\RoomUserForUpdate $body Updated Role and Side of the given user (optional)
     *
     * @throws ApiException on non-2xx response
     * @return array of \DocuSign\Rooms\Model\RoomUser, HTTP status code, HTTP response headers (array of strings)
     */
    public function putRoomUserWithHttpInfo($room_id, $user_id, $account_id, $body = null): array
    {
        // verify the required parameter 'room_id' is set
        if ($room_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $room_id when calling putRoomUser');
        }
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling putRoomUser');
        }
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling putRoomUser');
        }
        // parse inputs
        $resourcePath = "/v2/accounts/{accountId}/rooms/{roomId}/users/{userId}";
        $httpBody = $_tempBody ?? ''; // $_tempBody is the method argument, if present
        $queryParams = $headerParams = $formParams = [];
        $headerParams['Accept'] ??= $this->apiClient->selectHeaderAccept(['text/plain', 'application/json', 'text/json', 'application/xml', 'text/xml']);
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json', 'application/xml', 'text/xml', 'application/_*+xml']);


        // path params
        if ($room_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "roomId", $room_id);
        }
        // path params
        if ($user_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "userId", $user_id);
        }
        // path params
        if ($account_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "accountId", $account_id);
        }

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DocuSign\Rooms\Model\RoomUser',
                '/v2/accounts/{accountId}/rooms/{roomId}/users/{userId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DocuSign\Rooms\Model\RoomUser', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Rooms\Model\RoomUser', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Rooms\Model\ApiError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Rooms\Model\ApiError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation restoreRoomUserAccess
     *
     * Restores the specified user's access to the room.
     *
     * @param ?int $room_id The room Id to restore access
     * @param ?int $user_id The user Id getting restored to the room
     * @param ?string $account_id (Required) The globally unique identifier (GUID) for the account.
     *
     * @throws ApiException on non-2xx response
     * @return mixed
     */
    public function restoreRoomUserAccess($room_id, $user_id, $account_id)
    {
        list($response) = $this->restoreRoomUserAccessWithHttpInfo($room_id, $user_id, $account_id);
        return $response;
    }

    /**
     * Operation restoreRoomUserAccessWithHttpInfo
     *
     * Restores the specified user's access to the room.
     *
     * @param ?int $room_id The room Id to restore access
     * @param ?int $user_id The user Id getting restored to the room
     * @param ?string $account_id (Required) The globally unique identifier (GUID) for the account.
     *
     * @throws ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function restoreRoomUserAccessWithHttpInfo($room_id, $user_id, $account_id): array
    {
        // verify the required parameter 'room_id' is set
        if ($room_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $room_id when calling restoreRoomUserAccess');
        }
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling restoreRoomUserAccess');
        }
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling restoreRoomUserAccess');
        }
        // parse inputs
        $resourcePath = "/v2/accounts/{accountId}/rooms/{roomId}/users/{userId}/restore_access";
        $httpBody = $_tempBody ?? ''; // $_tempBody is the method argument, if present
        $queryParams = $headerParams = $formParams = [];
        $headerParams['Accept'] ??= $this->apiClient->selectHeaderAccept(['text/plain', 'application/json', 'text/json', 'application/xml', 'text/xml']);
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']);


        // path params
        if ($room_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "roomId", $room_id);
        }
        // path params
        if ($user_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "userId", $user_id);
        }
        // path params
        if ($account_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "accountId", $account_id);
        }

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/v2/accounts/{accountId}/rooms/{roomId}/users/{userId}/restore_access'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Rooms\Model\ApiError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Rooms\Model\ApiError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation revokeRoomUserAccess
     *
     * Revokes the specified user's access to the room.
     *
     * @param ?int $room_id The room Id to revoke access from
     * @param ?int $user_id The user Id getting revoked from the room
     * @param ?string $account_id (Required) The globally unique identifier (GUID) for the account.
     * @param \DocuSign\Rooms\Model\RoomUserRemovalDetail $body Contains the date on which the users room access should be revoked (optional)
     *
     * @throws ApiException on non-2xx response
     * @return mixed
     */
    public function revokeRoomUserAccess($room_id, $user_id, $account_id, $body = null)
    {
        list($response) = $this->revokeRoomUserAccessWithHttpInfo($room_id, $user_id, $account_id, $body);
        return $response;
    }

    /**
     * Operation revokeRoomUserAccessWithHttpInfo
     *
     * Revokes the specified user's access to the room.
     *
     * @param ?int $room_id The room Id to revoke access from
     * @param ?int $user_id The user Id getting revoked from the room
     * @param ?string $account_id (Required) The globally unique identifier (GUID) for the account.
     * @param \DocuSign\Rooms\Model\RoomUserRemovalDetail $body Contains the date on which the users room access should be revoked (optional)
     *
     * @throws ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function revokeRoomUserAccessWithHttpInfo($room_id, $user_id, $account_id, $body = null): array
    {
        // verify the required parameter 'room_id' is set
        if ($room_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $room_id when calling revokeRoomUserAccess');
        }
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling revokeRoomUserAccess');
        }
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling revokeRoomUserAccess');
        }
        // parse inputs
        $resourcePath = "/v2/accounts/{accountId}/rooms/{roomId}/users/{userId}/revoke_access";
        $httpBody = $_tempBody ?? ''; // $_tempBody is the method argument, if present
        $queryParams = $headerParams = $formParams = [];
        $headerParams['Accept'] ??= $this->apiClient->selectHeaderAccept(['text/plain', 'application/json', 'text/json', 'application/xml', 'text/xml']);
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json', 'application/xml', 'text/xml', 'application/_*+xml']);


        // path params
        if ($room_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "roomId", $room_id);
        }
        // path params
        if ($user_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "userId", $user_id);
        }
        // path params
        if ($account_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "accountId", $account_id);
        }

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/v2/accounts/{accountId}/rooms/{roomId}/users/{userId}/revoke_access'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Rooms\Model\ApiError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Rooms\Model\ApiError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updatePicture
     *
     * Update the picture for a room.
     *
     * @param ?int $room_id ID of the room the picture is for.
     * @param ?string $account_id (Required) The globally unique identifier (GUID) for the account.
    * @param \SplFileObject $file File to be uploaded (optional)
     *
     * @throws ApiException on non-2xx response
     * @return \DocuSign\Rooms\Model\RoomPicture
     */
    public function updatePicture($room_id, $account_id, $file)
    {
        list($response) = $this->updatePictureWithHttpInfo($room_id, $account_id, $file);
        return $response;
    }

    /**
     * Operation updatePictureWithHttpInfo
     *
     * Update the picture for a room.
     *
     * @param ?int $room_id ID of the room the picture is for.
     * @param ?string $account_id (Required) The globally unique identifier (GUID) for the account.
    * @param \SplFileObject $file File to be uploaded (optional)
     *
     * @throws ApiException on non-2xx response
     * @return array of \DocuSign\Rooms\Model\RoomPicture, HTTP status code, HTTP response headers (array of strings)
     */
    public function updatePictureWithHttpInfo($room_id, $account_id, $file): array
    {
        // verify the required parameter 'room_id' is set
        if ($room_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $room_id when calling updatePicture');
        }
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling updatePicture');
        }
        // parse inputs
        $resourcePath = "/v2/accounts/{accountId}/rooms/{roomId}/picture";
        $httpBody = $_tempBody ?? ''; // $_tempBody is the method argument, if present
        $queryParams = $headerParams = $formParams = [];
        $headerParams['Accept'] ??= $this->apiClient->selectHeaderAccept(['application/json']);
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['multipart/form-data']);


        // path params
        if ($room_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "roomId", $room_id);
        }
        // path params
        if ($account_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "accountId", $account_id);
        }

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        // form params
        if ($file !== null) {
            // PHP 5.5 introduced a CurlFile object that deprecates the old @filename syntax
            // See: https://wiki.php.net/rfc/curl-file-upload
            if (function_exists('curl_file_create')) {
                $formParams['file'] = curl_file_create($this->apiClient->getSerializer()->toFormValue($file));
            } else {
                $formParams['file'] = '@' . $this->apiClient->getSerializer()->toFormValue($file);
            }
        }
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DocuSign\Rooms\Model\RoomPicture',
                '/v2/accounts/{accountId}/rooms/{roomId}/picture'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DocuSign\Rooms\Model\RoomPicture', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Rooms\Model\RoomPicture', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Rooms\Model\ApiError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Rooms\Model\ApiError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateRoomFieldData
     *
     * Updates room field data.
     *
     * @param ?int $room_id The id of the room.
     * @param ?string $account_id (Required) The globally unique identifier (GUID) for the account.
     * @param \DocuSign\Rooms\Model\FieldDataForUpdate $body Dictionary of data to be updated (optional)
     *
     * @throws ApiException on non-2xx response
     * @return \DocuSign\Rooms\Model\FieldData
     */
    public function updateRoomFieldData($room_id, $account_id, $body = null)
    {
        list($response) = $this->updateRoomFieldDataWithHttpInfo($room_id, $account_id, $body);
        return $response;
    }

    /**
     * Operation updateRoomFieldDataWithHttpInfo
     *
     * Updates room field data.
     *
     * @param ?int $room_id The id of the room.
     * @param ?string $account_id (Required) The globally unique identifier (GUID) for the account.
     * @param \DocuSign\Rooms\Model\FieldDataForUpdate $body Dictionary of data to be updated (optional)
     *
     * @throws ApiException on non-2xx response
     * @return array of \DocuSign\Rooms\Model\FieldData, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateRoomFieldDataWithHttpInfo($room_id, $account_id, $body = null): array
    {
        // verify the required parameter 'room_id' is set
        if ($room_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $room_id when calling updateRoomFieldData');
        }
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling updateRoomFieldData');
        }
        // parse inputs
        $resourcePath = "/v2/accounts/{accountId}/rooms/{roomId}/field_data";
        $httpBody = $_tempBody ?? ''; // $_tempBody is the method argument, if present
        $queryParams = $headerParams = $formParams = [];
        $headerParams['Accept'] ??= $this->apiClient->selectHeaderAccept(['text/plain', 'application/json', 'text/json', 'application/xml', 'text/xml']);
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']);


        // path params
        if ($room_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "roomId", $room_id);
        }
        // path params
        if ($account_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "accountId", $account_id);
        }

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DocuSign\Rooms\Model\FieldData',
                '/v2/accounts/{accountId}/rooms/{roomId}/field_data'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DocuSign\Rooms\Model\FieldData', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Rooms\Model\FieldData', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Rooms\Model\ApiError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Rooms\Model\ApiError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
