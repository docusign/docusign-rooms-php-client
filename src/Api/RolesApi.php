<?php
declare(strict_types=1);

/**
 * RolesApi.
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  DocuSign\Rooms
 * @author   Swagger Codegen team <apihelp@docusign.com>
 * @license  The DocuSign PHP Client SDK is licensed under the MIT License.
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * DocuSign Rooms API - v2
 *
 * An API for an integrator to access the features of DocuSign Rooms
 *
 * OpenAPI spec version: v2
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace DocuSign\Rooms\Api\RolesApi;


/**
 * GetRoleOptions Class Doc Comment
 *
 * @category Class
 * @package  DocuSign\Rooms
 * @author   Swagger Codegen team <apihelp@docusign.com>
 * @license  The DocuSign PHP Client SDK is licensed under the MIT License.
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GetRoleOptions
{
    /**
      * $include_is_assigned When set to true, the response includes the `isAssigned` property, which specifies whether the role is currently assigned to any users. The default is false.
      * @var ?bool
      */
    protected ?bool $include_is_assigned = null;

    /**
     * Gets include_is_assigned
     *
     * @return ?bool
     */
    public function getIncludeIsAssigned(): ?bool
    {
        return $this->include_is_assigned;
    }

    /**
     * Sets include_is_assigned
     * @param ?bool $include_is_assigned When set to true, the response includes the `isAssigned` property, which specifies whether the role is currently assigned to any users. The default is false.
     *
     * @return self
     */
    public function setIncludeIsAssigned(?bool $include_is_assigned): self
    {
        $this->include_is_assigned = $include_is_assigned;
        return $this;
    }
}


/**
 * GetRolesOptions Class Doc Comment
 *
 * @category Class
 * @package  DocuSign\Rooms
 * @author   Swagger Codegen team <apihelp@docusign.com>
 * @license  The DocuSign PHP Client SDK is licensed under the MIT License.
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GetRolesOptions
{
    /**
      * $only_assignable Returns assignable roles based on calling user's company permissions.               DEPRECATED: Please use filterContext parameter to get the assignable roles. AssignableRolesBasedOnCompanyPermissions returns same results as onlyAssignable=true
      * @var ?bool
      */
    protected ?bool $only_assignable = null;

    /**
     * Gets only_assignable
     *
     * @return ?bool
     */
    public function getOnlyAssignable(): ?bool
    {
        return $this->only_assignable;
    }

    /**
     * Sets only_assignable
     * @param ?bool $only_assignable Returns assignable roles based on calling user's company permissions.               DEPRECATED: Please use filterContext parameter to get the assignable roles. AssignableRolesBasedOnCompanyPermissions returns same results as onlyAssignable=true
     *
     * @return self
     */
    public function setOnlyAssignable(?bool $only_assignable): self
    {
        $this->only_assignable = $only_assignable;
        return $this;
    }
    /**
      * $filter_context Attribute establishing filter context for roles being returned - AllRoles, AssignableRolesBasedOnCompanyPermissions, AssignableRolesBasedOnAllPermissions
      * @var ?string
      */
    protected ?string $filter_context = null;

    /**
     * Gets filter_context
     *
     * @return ?string
     */
    public function getFilterContext(): ?string
    {
        return $this->filter_context;
    }

    /**
     * Sets filter_context
     * @param ?string $filter_context Attribute establishing filter context for roles being returned - AllRoles, AssignableRolesBasedOnCompanyPermissions, AssignableRolesBasedOnAllPermissions
     *
     * @return self
     */
    public function setFilterContext(?string $filter_context): self
    {
        $this->filter_context = $filter_context;
        return $this;
    }
    /**
      * $filter A search filter that returns roles by the beginning of the role name. You can enter the beginning of the role name only to return all of the roles that begin with the text that you entered.
      * @var ?string
      */
    protected ?string $filter = null;

    /**
     * Gets filter
     *
     * @return ?string
     */
    public function getFilter(): ?string
    {
        return $this->filter;
    }

    /**
     * Sets filter
     * @param ?string $filter A search filter that returns roles by the beginning of the role name. You can enter the beginning of the role name only to return all of the roles that begin with the text that you entered.
     *
     * @return self
     */
    public function setFilter(?string $filter): self
    {
        $this->filter = $filter;
        return $this;
    }
    /**
      * $start_position The starting zero-based index position of the result set. The default value is 0.
      * @var ?int
      */
    protected ?int $start_position = null;

    /**
     * Gets start_position
     *
     * @return ?int
     */
    public function getStartPosition(): ?int
    {
        return $this->start_position;
    }

    /**
     * Sets start_position
     * @param ?int $start_position The starting zero-based index position of the result set. The default value is 0.
     *
     * @return self
     */
    public function setStartPosition(?int $start_position): self
    {
        $this->start_position = $start_position;
        return $this;
    }
    /**
      * $count The number of results to return. This value must be a number between `1` and `100` (default).
      * @var ?int
      */
    protected ?int $count = null;

    /**
     * Gets count
     *
     * @return ?int
     */
    public function getCount(): ?int
    {
        return $this->count;
    }

    /**
     * Sets count
     * @param ?int $count The number of results to return. This value must be a number between `1` and `100` (default).
     *
     * @return self
     */
    public function setCount(?int $count): self
    {
        $this->count = $count;
        return $this;
    }
}



namespace DocuSign\Rooms\Api;

use DocuSign\Rooms\Client\ApiClient;
use DocuSign\Rooms\Client\ApiException;
use DocuSign\Rooms\Configuration;
use DocuSign\Rooms\ObjectSerializer;

/**
 * RolesApi Class Doc Comment
 *
 * @category Class
 * @package  DocuSign\Rooms
 * @author   Swagger Codegen team <apihelp@docusign.com>
 * @license  The DocuSign PHP Client SDK is licensed under the MIT License.
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RolesApi
{
    /**
     * API Client
     *
     * @var ApiClient instance of the ApiClient
     */
    protected ApiClient $apiClient;

    /**
     * Constructor
     *
     * @param ApiClient|null $apiClient The api client to use
     *
     * @return void
     */
    public function __construct(ApiClient $apiClient = null)
    {
        $this->apiClient = $apiClient ?? new ApiClient();
    }

    /**
     * Get API client
     *
     * @return ApiClient get the API client
     */
    public function getApiClient(): ApiClient
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param ApiClient $apiClient set the API client
     *
     * @return self
     */
    public function setApiClient(ApiClient $apiClient): self
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
    * Update $resourcePath with $
    *
    * @param string $resourcePath the resource path to use
    * @param string $baseName the base name param
    * @param string $paramName the parameter name
    *
    * @return string
    */
    public function updateResourcePath(string $resourcePath, string $baseName, string $paramName): string
    {
        return str_replace(
            "{" . $baseName . "}",
            $this->apiClient->getSerializer()->toPathValue($paramName),
            $resourcePath
        );
    }


    /**
     * Operation createRole
     *
     * Creates a role.
     *
     * @param ?string $account_id (Required) The globally unique identifier (GUID) for the account.
     * @param \DocuSign\Rooms\Model\RoleForCreate $body Name and permission details of the role to be created (optional)
     *
     * @throws ApiException on non-2xx response
     * @return \DocuSign\Rooms\Model\Role
     */
    public function createRole($account_id, $body = null)
    {
        list($response) = $this->createRoleWithHttpInfo($account_id, $body);
        return $response;
    }

    /**
     * Operation createRoleWithHttpInfo
     *
     * Creates a role.
     *
     * @param ?string $account_id (Required) The globally unique identifier (GUID) for the account.
     * @param \DocuSign\Rooms\Model\RoleForCreate $body Name and permission details of the role to be created (optional)
     *
     * @throws ApiException on non-2xx response
     * @return array of \DocuSign\Rooms\Model\Role, HTTP status code, HTTP response headers (array of strings)
     */
    public function createRoleWithHttpInfo($account_id, $body = null): array
    {
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling createRole');
        }
        // parse inputs
        $resourcePath = "/v2/accounts/{accountId}/roles";
        $httpBody = $_tempBody ?? ''; // $_tempBody is the method argument, if present
        $queryParams = $headerParams = $formParams = [];
        $headerParams['Accept'] ??= $this->apiClient->selectHeaderAccept(['text/plain', 'application/json', 'text/json', 'application/xml', 'text/xml']);
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json', 'application/xml', 'text/xml', 'application/_*+xml']);


        // path params
        if ($account_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "accountId", $account_id);
        }

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DocuSign\Rooms\Model\Role',
                '/v2/accounts/{accountId}/roles'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DocuSign\Rooms\Model\Role', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Rooms\Model\Role', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Rooms\Model\ApiError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Rooms\Model\ApiError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteRole
     *
     * Deletes the role with the given roleId.
     *
     * @param ?int $role_id The id of the role.
     * @param ?string $account_id (Required) The globally unique identifier (GUID) for the account.
     *
     * @throws ApiException on non-2xx response
     * @return mixed
     */
    public function deleteRole($role_id, $account_id)
    {
        list($response) = $this->deleteRoleWithHttpInfo($role_id, $account_id);
        return $response;
    }

    /**
     * Operation deleteRoleWithHttpInfo
     *
     * Deletes the role with the given roleId.
     *
     * @param ?int $role_id The id of the role.
     * @param ?string $account_id (Required) The globally unique identifier (GUID) for the account.
     *
     * @throws ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteRoleWithHttpInfo($role_id, $account_id): array
    {
        // verify the required parameter 'role_id' is set
        if ($role_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $role_id when calling deleteRole');
        }
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling deleteRole');
        }
        // parse inputs
        $resourcePath = "/v2/accounts/{accountId}/roles/{roleId}";
        $httpBody = $_tempBody ?? ''; // $_tempBody is the method argument, if present
        $queryParams = $headerParams = $formParams = [];
        $headerParams['Accept'] ??= $this->apiClient->selectHeaderAccept(['text/plain', 'application/json', 'text/json', 'application/xml', 'text/xml']);
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']);


        // path params
        if ($role_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "roleId", $role_id);
        }
        // path params
        if ($account_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "accountId", $account_id);
        }

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/v2/accounts/{accountId}/roles/{roleId}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Rooms\Model\ApiError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Rooms\Model\ApiError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getRole
     *
     * Get information about the role with the given roleId.
     *
     * @param ?int $role_id The id of the role.
     * @param ?string $account_id (Required) The globally unique identifier (GUID) for the account.
     * @param  \DocuSign\Rooms\Api\RolesApi\GetRoleOptions  $options for modifying the behavior of the function. (optional)
     *
     * @throws ApiException on non-2xx response
     * @return \DocuSign\Rooms\Model\Role
     */
    public function getRole($role_id, $account_id, \DocuSign\Rooms\Api\RolesApi\GetRoleOptions $options = null)
    {
        list($response) = $this->getRoleWithHttpInfo($role_id, $account_id, $options);
        return $response;
    }

    /**
     * Operation getRoleWithHttpInfo
     *
     * Get information about the role with the given roleId.
     *
     * @param ?int $role_id The id of the role.
     * @param ?string $account_id (Required) The globally unique identifier (GUID) for the account.
     * @param  \DocuSign\Rooms\Api\RolesApi\GetRoleOptions  $options for modifying the behavior of the function. (optional)
     *
     * @throws ApiException on non-2xx response
     * @return array of \DocuSign\Rooms\Model\Role, HTTP status code, HTTP response headers (array of strings)
     */
    public function getRoleWithHttpInfo($role_id, $account_id, \DocuSign\Rooms\Api\RolesApi\GetRoleOptions $options = null): array
    {
        // verify the required parameter 'role_id' is set
        if ($role_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $role_id when calling getRole');
        }
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling getRole');
        }
        // parse inputs
        $resourcePath = "/v2/accounts/{accountId}/roles/{roleId}";
        $httpBody = $_tempBody ?? ''; // $_tempBody is the method argument, if present
        $queryParams = $headerParams = $formParams = [];
        $headerParams['Accept'] ??= $this->apiClient->selectHeaderAccept(['text/plain', 'application/json', 'text/json', 'application/xml', 'text/xml']);
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']);

        if ($options != null)
        {
            // query params
            if ($options->getIncludeIsAssigned() != 'null') {
                $queryParams['includeIsAssigned'] = $this->apiClient->getSerializer()->toQueryValue($options->getIncludeIsAssigned());
            }
        }

        // path params
        if ($role_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "roleId", $role_id);
        }
        // path params
        if ($account_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "accountId", $account_id);
        }

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DocuSign\Rooms\Model\Role',
                '/v2/accounts/{accountId}/roles/{roleId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DocuSign\Rooms\Model\Role', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Rooms\Model\Role', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Rooms\Model\ApiError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Rooms\Model\ApiError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getRoles
     *
     * Gets a paged-list of roles in your company
     *
     * @param ?string $account_id (Required) The globally unique identifier (GUID) for the account.
     * @param  \DocuSign\Rooms\Api\RolesApi\GetRolesOptions  $options for modifying the behavior of the function. (optional)
     *
     * @throws ApiException on non-2xx response
     * @return \DocuSign\Rooms\Model\RoleSummaryList
     */
    public function getRoles($account_id, \DocuSign\Rooms\Api\RolesApi\GetRolesOptions $options = null)
    {
        list($response) = $this->getRolesWithHttpInfo($account_id, $options);
        return $response;
    }

    /**
     * Operation getRolesWithHttpInfo
     *
     * Gets a paged-list of roles in your company
     *
     * @param ?string $account_id (Required) The globally unique identifier (GUID) for the account.
     * @param  \DocuSign\Rooms\Api\RolesApi\GetRolesOptions  $options for modifying the behavior of the function. (optional)
     *
     * @throws ApiException on non-2xx response
     * @return array of \DocuSign\Rooms\Model\RoleSummaryList, HTTP status code, HTTP response headers (array of strings)
     */
    public function getRolesWithHttpInfo($account_id, \DocuSign\Rooms\Api\RolesApi\GetRolesOptions $options = null): array
    {
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling getRoles');
        }
        // parse inputs
        $resourcePath = "/v2/accounts/{accountId}/roles";
        $httpBody = $_tempBody ?? ''; // $_tempBody is the method argument, if present
        $queryParams = $headerParams = $formParams = [];
        $headerParams['Accept'] ??= $this->apiClient->selectHeaderAccept(['text/plain', 'application/json', 'text/json', 'application/xml', 'text/xml']);
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json']);

        if ($options != null)
        {
            // query params
            if ($options->getOnlyAssignable() != 'null') {
                $queryParams['onlyAssignable'] = $this->apiClient->getSerializer()->toQueryValue($options->getOnlyAssignable());
            }
            if ($options->getFilterContext() != 'null') {
                $queryParams['filterContext'] = $this->apiClient->getSerializer()->toQueryValue($options->getFilterContext());
            }
            if ($options->getFilter() != 'null') {
                $queryParams['filter'] = $this->apiClient->getSerializer()->toQueryValue($options->getFilter());
            }
            if ($options->getStartPosition() != 'null') {
                $queryParams['startPosition'] = $this->apiClient->getSerializer()->toQueryValue($options->getStartPosition());
            }
            if ($options->getCount() != 'null') {
                $queryParams['count'] = $this->apiClient->getSerializer()->toQueryValue($options->getCount());
            }
        }

        // path params
        if ($account_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "accountId", $account_id);
        }

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DocuSign\Rooms\Model\RoleSummaryList',
                '/v2/accounts/{accountId}/roles'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DocuSign\Rooms\Model\RoleSummaryList', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Rooms\Model\RoleSummaryList', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Rooms\Model\ApiError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Rooms\Model\ApiError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation updateRole
     *
     * Updates the role with the given roleId.
     *
     * @param ?int $role_id The id of the role.
     * @param ?string $account_id (Required) The globally unique identifier (GUID) for the account.
     * @param \DocuSign\Rooms\Model\RoleForUpdate $body Name and permission details of the role to be updated (optional)
     *
     * @throws ApiException on non-2xx response
     * @return \DocuSign\Rooms\Model\Role
     */
    public function updateRole($role_id, $account_id, $body = null)
    {
        list($response) = $this->updateRoleWithHttpInfo($role_id, $account_id, $body);
        return $response;
    }

    /**
     * Operation updateRoleWithHttpInfo
     *
     * Updates the role with the given roleId.
     *
     * @param ?int $role_id The id of the role.
     * @param ?string $account_id (Required) The globally unique identifier (GUID) for the account.
     * @param \DocuSign\Rooms\Model\RoleForUpdate $body Name and permission details of the role to be updated (optional)
     *
     * @throws ApiException on non-2xx response
     * @return array of \DocuSign\Rooms\Model\Role, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateRoleWithHttpInfo($role_id, $account_id, $body = null): array
    {
        // verify the required parameter 'role_id' is set
        if ($role_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $role_id when calling updateRole');
        }
        // verify the required parameter 'account_id' is set
        if ($account_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_id when calling updateRole');
        }
        // parse inputs
        $resourcePath = "/v2/accounts/{accountId}/roles/{roleId}";
        $httpBody = $_tempBody ?? ''; // $_tempBody is the method argument, if present
        $queryParams = $headerParams = $formParams = [];
        $headerParams['Accept'] ??= $this->apiClient->selectHeaderAccept(['text/plain', 'application/json', 'text/json', 'application/xml', 'text/xml']);
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json-patch+json', 'application/json', 'text/json', 'application/_*+json', 'application/xml', 'text/xml', 'application/_*+xml']);


        // path params
        if ($role_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "roleId", $role_id);
        }
        // path params
        if ($account_id !== null) {
            $resourcePath = self::updateResourcePath($resourcePath, "accountId", $account_id);
        }

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires OAuth (access token)
        if (strlen($this->apiClient->getConfig()->getAccessToken()) !== 0) {
            $headerParams['Authorization'] = 'Bearer ' . $this->apiClient->getConfig()->getAccessToken();
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                '\DocuSign\Rooms\Model\Role',
                '/v2/accounts/{accountId}/roles/{roleId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\DocuSign\Rooms\Model\Role', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Rooms\Model\Role', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Rooms\Model\ApiError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\DocuSign\Rooms\Model\ApiError', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
