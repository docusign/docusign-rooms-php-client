<?php
/**
 * RoomForCreate
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  DocuSign\Rooms
 * @author   Swagger Codegen team <apihelp@docusign.com>
 * @license  The DocuSign PHP Client SDK is licensed under the MIT License.
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * DocuSign Rooms API - v2
 *
 * An API for an integrator to access the features of DocuSign Rooms
 *
 * OpenAPI spec version: v2
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace DocuSign\Rooms\Model;

use \ArrayAccess;
use DocuSign\Rooms\ObjectSerializer;

/**
 * RoomForCreate Class Doc Comment
 *
 * @category    Class
 * @package     DocuSign\Rooms
 * @author      Swagger Codegen team <apihelp@docusign.com>
 * @license     The DocuSign PHP Client SDK is licensed under the MIT License.
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class RoomForCreate implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'RoomForCreate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => '?string',
        'role_id' => '?int',
        'transaction_side_id' => '?string',
        'owner_id' => '?int',
        'template_id' => '?int',
        'office_id' => '?int',
        'field_data' => '\DocuSign\Rooms\Model\FieldDataForCreate',
        'listing_source' => '?string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'name' => null,
        'role_id' => 'int32',
        'transaction_side_id' => null,
        'owner_id' => 'int32',
        'template_id' => 'int32',
        'office_id' => 'int32',
        'field_data' => null,
        'listing_source' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'role_id' => 'roleId',
        'transaction_side_id' => 'transactionSideId',
        'owner_id' => 'ownerId',
        'template_id' => 'templateId',
        'office_id' => 'officeId',
        'field_data' => 'fieldData',
        'listing_source' => 'listingSource'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'role_id' => 'setRoleId',
        'transaction_side_id' => 'setTransactionSideId',
        'owner_id' => 'setOwnerId',
        'template_id' => 'setTemplateId',
        'office_id' => 'setOfficeId',
        'field_data' => 'setFieldData',
        'listing_source' => 'setListingSource'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'role_id' => 'getRoleId',
        'transaction_side_id' => 'getTransactionSideId',
        'owner_id' => 'getOwnerId',
        'template_id' => 'getTemplateId',
        'office_id' => 'getOfficeId',
        'field_data' => 'getFieldData',
        'listing_source' => 'getListingSource'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const LISTING_SOURCE_PUBLIC_RECORDS = 'PublicRecords';
    const LISTING_SOURCE_MLS = 'MLS';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getListingSourceAllowableValues()
    {
        return [
            self::LISTING_SOURCE_PUBLIC_RECORDS,
            self::LISTING_SOURCE_MLS,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['role_id'] = isset($data['role_id']) ? $data['role_id'] : null;
        $this->container['transaction_side_id'] = isset($data['transaction_side_id']) ? $data['transaction_side_id'] : null;
        $this->container['owner_id'] = isset($data['owner_id']) ? $data['owner_id'] : null;
        $this->container['template_id'] = isset($data['template_id']) ? $data['template_id'] : null;
        $this->container['office_id'] = isset($data['office_id']) ? $data['office_id'] : null;
        $this->container['field_data'] = isset($data['field_data']) ? $data['field_data'] : null;
        $this->container['listing_source'] = isset($data['listing_source']) ? $data['listing_source'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['role_id'] === null) {
            $invalidProperties[] = "'role_id' can't be null";
        }
        $allowedValues = $this->getListingSourceAllowableValues();
        if (!is_null($this->container['listing_source']) && !in_array($this->container['listing_source'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'listing_source', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return ?string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param ?string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets role_id
     *
     * @return ?int
     */
    public function getRoleId()
    {
        return $this->container['role_id'];
    }

    /**
     * Sets role_id
     *
     * @param ?int $role_id role_id
     *
     * @return $this
     */
    public function setRoleId($role_id)
    {
        $this->container['role_id'] = $role_id;

        return $this;
    }

    /**
     * Gets transaction_side_id
     *
     * @return ?string
     */
    public function getTransactionSideId()
    {
        return $this->container['transaction_side_id'];
    }

    /**
     * Sets transaction_side_id
     *
     * @param ?string $transaction_side_id Required for a real estate company; otherwise ignored.
     *
     * @return $this
     */
    public function setTransactionSideId($transaction_side_id)
    {
        $this->container['transaction_side_id'] = $transaction_side_id;

        return $this;
    }

    /**
     * Gets owner_id
     *
     * @return ?int
     */
    public function getOwnerId()
    {
        return $this->container['owner_id'];
    }

    /**
     * Sets owner_id
     *
     * @param ?int $owner_id owner_id
     *
     * @return $this
     */
    public function setOwnerId($owner_id)
    {
        $this->container['owner_id'] = $owner_id;

        return $this;
    }

    /**
     * Gets template_id
     *
     * @return ?int
     */
    public function getTemplateId()
    {
        return $this->container['template_id'];
    }

    /**
     * Sets template_id
     *
     * @param ?int $template_id template_id
     *
     * @return $this
     */
    public function setTemplateId($template_id)
    {
        $this->container['template_id'] = $template_id;

        return $this;
    }

    /**
     * Gets office_id
     *
     * @return ?int
     */
    public function getOfficeId()
    {
        return $this->container['office_id'];
    }

    /**
     * Sets office_id
     *
     * @param ?int $office_id office_id
     *
     * @return $this
     */
    public function setOfficeId($office_id)
    {
        $this->container['office_id'] = $office_id;

        return $this;
    }

    /**
     * Gets field_data
     *
     * @return \DocuSign\Rooms\Model\FieldDataForCreate
     */
    public function getFieldData()
    {
        return $this->container['field_data'];
    }

    /**
     * Sets field_data
     *
     * @param \DocuSign\Rooms\Model\FieldDataForCreate $field_data field_data
     *
     * @return $this
     */
    public function setFieldData($field_data)
    {
        $this->container['field_data'] = $field_data;

        return $this;
    }

    /**
     * Gets listing_source
     *
     * @return ?string
     */
    public function getListingSource()
    {
        return $this->container['listing_source'];
    }

    /**
     * Sets listing_source
     *
     * @param ?string $listing_source listing_source
     *
     * @return $this
     */
    public function setListingSource($listing_source)
    {
        $allowedValues = $this->getListingSourceAllowableValues();
        if (!is_null($listing_source) && !in_array($listing_source, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'listing_source', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['listing_source'] = $listing_source;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

