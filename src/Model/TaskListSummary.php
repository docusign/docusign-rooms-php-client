<?php
/**
 * TaskListSummary
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  DocuSign\Rooms
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * DocuSign Rooms API - v2
 *
 * An API for an integrator to access the features of DocuSign Rooms
 *
 * OpenAPI spec version: v2
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.13-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace DocuSign\Rooms\Model;

use \ArrayAccess;
use DocuSign\Rooms\ObjectSerializer;

/**
 * TaskListSummary Class Doc Comment
 *
 * @category    Class
 * @package     DocuSign\Rooms
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class TaskListSummary implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TaskListSummary';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'task_list_id' => '?int',
        'name' => '?string',
        'task_list_template_id' => '?int',
        'submitted_for_review_date' => '\DateTime',
        'approval_date' => '\DateTime',
        'rejected_date' => '\DateTime',
        'created_date' => '\DateTime',
        'approved_by_user_id' => '?int',
        'rejected_by_user_id' => '?int',
        'comment' => '?string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'task_list_id' => 'int32',
        'name' => null,
        'task_list_template_id' => 'int32',
        'submitted_for_review_date' => 'date-time',
        'approval_date' => 'date-time',
        'rejected_date' => 'date-time',
        'created_date' => 'date-time',
        'approved_by_user_id' => 'int32',
        'rejected_by_user_id' => 'int32',
        'comment' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'task_list_id' => 'taskListId',
        'name' => 'name',
        'task_list_template_id' => 'taskListTemplateId',
        'submitted_for_review_date' => 'submittedForReviewDate',
        'approval_date' => 'approvalDate',
        'rejected_date' => 'rejectedDate',
        'created_date' => 'createdDate',
        'approved_by_user_id' => 'approvedByUserId',
        'rejected_by_user_id' => 'rejectedByUserId',
        'comment' => 'comment'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'task_list_id' => 'setTaskListId',
        'name' => 'setName',
        'task_list_template_id' => 'setTaskListTemplateId',
        'submitted_for_review_date' => 'setSubmittedForReviewDate',
        'approval_date' => 'setApprovalDate',
        'rejected_date' => 'setRejectedDate',
        'created_date' => 'setCreatedDate',
        'approved_by_user_id' => 'setApprovedByUserId',
        'rejected_by_user_id' => 'setRejectedByUserId',
        'comment' => 'setComment'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'task_list_id' => 'getTaskListId',
        'name' => 'getName',
        'task_list_template_id' => 'getTaskListTemplateId',
        'submitted_for_review_date' => 'getSubmittedForReviewDate',
        'approval_date' => 'getApprovalDate',
        'rejected_date' => 'getRejectedDate',
        'created_date' => 'getCreatedDate',
        'approved_by_user_id' => 'getApprovedByUserId',
        'rejected_by_user_id' => 'getRejectedByUserId',
        'comment' => 'getComment'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['task_list_id'] = isset($data['task_list_id']) ? $data['task_list_id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['task_list_template_id'] = isset($data['task_list_template_id']) ? $data['task_list_template_id'] : null;
        $this->container['submitted_for_review_date'] = isset($data['submitted_for_review_date']) ? $data['submitted_for_review_date'] : null;
        $this->container['approval_date'] = isset($data['approval_date']) ? $data['approval_date'] : null;
        $this->container['rejected_date'] = isset($data['rejected_date']) ? $data['rejected_date'] : null;
        $this->container['created_date'] = isset($data['created_date']) ? $data['created_date'] : null;
        $this->container['approved_by_user_id'] = isset($data['approved_by_user_id']) ? $data['approved_by_user_id'] : null;
        $this->container['rejected_by_user_id'] = isset($data['rejected_by_user_id']) ? $data['rejected_by_user_id'] : null;
        $this->container['comment'] = isset($data['comment']) ? $data['comment'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets task_list_id
     *
     * @return ?int
     */
    public function getTaskListId()
    {
        return $this->container['task_list_id'];
    }

    /**
     * Sets task_list_id
     *
     * @param ?int $task_list_id task_list_id
     *
     * @return $this
     */
    public function setTaskListId($task_list_id)
    {
        $this->container['task_list_id'] = $task_list_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return ?string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param ?string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets task_list_template_id
     *
     * @return ?int
     */
    public function getTaskListTemplateId()
    {
        return $this->container['task_list_template_id'];
    }

    /**
     * Sets task_list_template_id
     *
     * @param ?int $task_list_template_id task_list_template_id
     *
     * @return $this
     */
    public function setTaskListTemplateId($task_list_template_id)
    {
        $this->container['task_list_template_id'] = $task_list_template_id;

        return $this;
    }

    /**
     * Gets submitted_for_review_date
     *
     * @return \DateTime
     */
    public function getSubmittedForReviewDate()
    {
        return $this->container['submitted_for_review_date'];
    }

    /**
     * Sets submitted_for_review_date
     *
     * @param \DateTime $submitted_for_review_date submitted_for_review_date
     *
     * @return $this
     */
    public function setSubmittedForReviewDate($submitted_for_review_date)
    {
        $this->container['submitted_for_review_date'] = $submitted_for_review_date;

        return $this;
    }

    /**
     * Gets approval_date
     *
     * @return \DateTime
     */
    public function getApprovalDate()
    {
        return $this->container['approval_date'];
    }

    /**
     * Sets approval_date
     *
     * @param \DateTime $approval_date approval_date
     *
     * @return $this
     */
    public function setApprovalDate($approval_date)
    {
        $this->container['approval_date'] = $approval_date;

        return $this;
    }

    /**
     * Gets rejected_date
     *
     * @return \DateTime
     */
    public function getRejectedDate()
    {
        return $this->container['rejected_date'];
    }

    /**
     * Sets rejected_date
     *
     * @param \DateTime $rejected_date rejected_date
     *
     * @return $this
     */
    public function setRejectedDate($rejected_date)
    {
        $this->container['rejected_date'] = $rejected_date;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return \DateTime
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param \DateTime $created_date created_date
     *
     * @return $this
     */
    public function setCreatedDate($created_date)
    {
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets approved_by_user_id
     *
     * @return ?int
     */
    public function getApprovedByUserId()
    {
        return $this->container['approved_by_user_id'];
    }

    /**
     * Sets approved_by_user_id
     *
     * @param ?int $approved_by_user_id approved_by_user_id
     *
     * @return $this
     */
    public function setApprovedByUserId($approved_by_user_id)
    {
        $this->container['approved_by_user_id'] = $approved_by_user_id;

        return $this;
    }

    /**
     * Gets rejected_by_user_id
     *
     * @return ?int
     */
    public function getRejectedByUserId()
    {
        return $this->container['rejected_by_user_id'];
    }

    /**
     * Sets rejected_by_user_id
     *
     * @param ?int $rejected_by_user_id rejected_by_user_id
     *
     * @return $this
     */
    public function setRejectedByUserId($rejected_by_user_id)
    {
        $this->container['rejected_by_user_id'] = $rejected_by_user_id;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return ?string
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param ?string $comment comment
     *
     * @return $this
     */
    public function setComment($comment)
    {
        $this->container['comment'] = $comment;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

