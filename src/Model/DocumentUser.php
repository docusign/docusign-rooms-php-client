<?php
/**
 * DocumentUser
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  DocuSign\Rooms
 * @author   Swagger Codegen team <apihelp@docusign.com>
 * @license  The DocuSign PHP Client SDK is licensed under the MIT License.
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * DocuSign Rooms API - v2
 *
 * An API for an integrator to access the features of DocuSign Rooms
 *
 * OpenAPI spec version: v2
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.21
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace DocuSign\Rooms\Model;

use \ArrayAccess;
use DocuSign\Rooms\ObjectSerializer;

/**
 * DocumentUser Class Doc Comment
 *
 * @category    Class
 * @package     DocuSign\Rooms
 * @author      Swagger Codegen team <apihelp@docusign.com>
 * @license     The DocuSign PHP Client SDK is licensed under the MIT License.
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class DocumentUser implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DocumentUser';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'user_id' => '?int',
        'document_id' => '?int',
        'name' => '?string',
        'has_access' => '?bool',
        'can_approve_task' => '?bool',
        'can_assign_to_task_list' => '?bool',
        'can_copy' => '?bool',
        'can_delete' => '?bool',
        'can_remove_from_task_list' => '?bool',
        'can_remove_approval' => '?bool',
        'can_rename' => '?bool',
        'can_share' => '?bool',
        'can_view_activity' => '?bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'user_id' => 'int32',
        'document_id' => 'int32',
        'name' => null,
        'has_access' => null,
        'can_approve_task' => null,
        'can_assign_to_task_list' => null,
        'can_copy' => null,
        'can_delete' => null,
        'can_remove_from_task_list' => null,
        'can_remove_approval' => null,
        'can_rename' => null,
        'can_share' => null,
        'can_view_activity' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'user_id' => 'userId',
        'document_id' => 'documentId',
        'name' => 'name',
        'has_access' => 'hasAccess',
        'can_approve_task' => 'canApproveTask',
        'can_assign_to_task_list' => 'canAssignToTaskList',
        'can_copy' => 'canCopy',
        'can_delete' => 'canDelete',
        'can_remove_from_task_list' => 'canRemoveFromTaskList',
        'can_remove_approval' => 'canRemoveApproval',
        'can_rename' => 'canRename',
        'can_share' => 'canShare',
        'can_view_activity' => 'canViewActivity'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'user_id' => 'setUserId',
        'document_id' => 'setDocumentId',
        'name' => 'setName',
        'has_access' => 'setHasAccess',
        'can_approve_task' => 'setCanApproveTask',
        'can_assign_to_task_list' => 'setCanAssignToTaskList',
        'can_copy' => 'setCanCopy',
        'can_delete' => 'setCanDelete',
        'can_remove_from_task_list' => 'setCanRemoveFromTaskList',
        'can_remove_approval' => 'setCanRemoveApproval',
        'can_rename' => 'setCanRename',
        'can_share' => 'setCanShare',
        'can_view_activity' => 'setCanViewActivity'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'user_id' => 'getUserId',
        'document_id' => 'getDocumentId',
        'name' => 'getName',
        'has_access' => 'getHasAccess',
        'can_approve_task' => 'getCanApproveTask',
        'can_assign_to_task_list' => 'getCanAssignToTaskList',
        'can_copy' => 'getCanCopy',
        'can_delete' => 'getCanDelete',
        'can_remove_from_task_list' => 'getCanRemoveFromTaskList',
        'can_remove_approval' => 'getCanRemoveApproval',
        'can_rename' => 'getCanRename',
        'can_share' => 'getCanShare',
        'can_view_activity' => 'getCanViewActivity'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['user_id'] = isset($data['user_id']) ? $data['user_id'] : null;
        $this->container['document_id'] = isset($data['document_id']) ? $data['document_id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['has_access'] = isset($data['has_access']) ? $data['has_access'] : null;
        $this->container['can_approve_task'] = isset($data['can_approve_task']) ? $data['can_approve_task'] : null;
        $this->container['can_assign_to_task_list'] = isset($data['can_assign_to_task_list']) ? $data['can_assign_to_task_list'] : null;
        $this->container['can_copy'] = isset($data['can_copy']) ? $data['can_copy'] : null;
        $this->container['can_delete'] = isset($data['can_delete']) ? $data['can_delete'] : null;
        $this->container['can_remove_from_task_list'] = isset($data['can_remove_from_task_list']) ? $data['can_remove_from_task_list'] : null;
        $this->container['can_remove_approval'] = isset($data['can_remove_approval']) ? $data['can_remove_approval'] : null;
        $this->container['can_rename'] = isset($data['can_rename']) ? $data['can_rename'] : null;
        $this->container['can_share'] = isset($data['can_share']) ? $data['can_share'] : null;
        $this->container['can_view_activity'] = isset($data['can_view_activity']) ? $data['can_view_activity'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets user_id
     *
     * @return ?int
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param ?int $user_id user_id
     *
     * @return $this
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets document_id
     *
     * @return ?int
     */
    public function getDocumentId()
    {
        return $this->container['document_id'];
    }

    /**
     * Sets document_id
     *
     * @param ?int $document_id document_id
     *
     * @return $this
     */
    public function setDocumentId($document_id)
    {
        $this->container['document_id'] = $document_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return ?string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param ?string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets has_access
     *
     * @return ?bool
     */
    public function getHasAccess()
    {
        return $this->container['has_access'];
    }

    /**
     * Sets has_access
     *
     * @param ?bool $has_access has_access
     *
     * @return $this
     */
    public function setHasAccess($has_access)
    {
        $this->container['has_access'] = $has_access;

        return $this;
    }

    /**
     * Gets can_approve_task
     *
     * @return ?bool
     */
    public function getCanApproveTask()
    {
        return $this->container['can_approve_task'];
    }

    /**
     * Sets can_approve_task
     *
     * @param ?bool $can_approve_task can_approve_task
     *
     * @return $this
     */
    public function setCanApproveTask($can_approve_task)
    {
        $this->container['can_approve_task'] = $can_approve_task;

        return $this;
    }

    /**
     * Gets can_assign_to_task_list
     *
     * @return ?bool
     */
    public function getCanAssignToTaskList()
    {
        return $this->container['can_assign_to_task_list'];
    }

    /**
     * Sets can_assign_to_task_list
     *
     * @param ?bool $can_assign_to_task_list can_assign_to_task_list
     *
     * @return $this
     */
    public function setCanAssignToTaskList($can_assign_to_task_list)
    {
        $this->container['can_assign_to_task_list'] = $can_assign_to_task_list;

        return $this;
    }

    /**
     * Gets can_copy
     *
     * @return ?bool
     */
    public function getCanCopy()
    {
        return $this->container['can_copy'];
    }

    /**
     * Sets can_copy
     *
     * @param ?bool $can_copy can_copy
     *
     * @return $this
     */
    public function setCanCopy($can_copy)
    {
        $this->container['can_copy'] = $can_copy;

        return $this;
    }

    /**
     * Gets can_delete
     *
     * @return ?bool
     */
    public function getCanDelete()
    {
        return $this->container['can_delete'];
    }

    /**
     * Sets can_delete
     *
     * @param ?bool $can_delete can_delete
     *
     * @return $this
     */
    public function setCanDelete($can_delete)
    {
        $this->container['can_delete'] = $can_delete;

        return $this;
    }

    /**
     * Gets can_remove_from_task_list
     *
     * @return ?bool
     */
    public function getCanRemoveFromTaskList()
    {
        return $this->container['can_remove_from_task_list'];
    }

    /**
     * Sets can_remove_from_task_list
     *
     * @param ?bool $can_remove_from_task_list can_remove_from_task_list
     *
     * @return $this
     */
    public function setCanRemoveFromTaskList($can_remove_from_task_list)
    {
        $this->container['can_remove_from_task_list'] = $can_remove_from_task_list;

        return $this;
    }

    /**
     * Gets can_remove_approval
     *
     * @return ?bool
     */
    public function getCanRemoveApproval()
    {
        return $this->container['can_remove_approval'];
    }

    /**
     * Sets can_remove_approval
     *
     * @param ?bool $can_remove_approval can_remove_approval
     *
     * @return $this
     */
    public function setCanRemoveApproval($can_remove_approval)
    {
        $this->container['can_remove_approval'] = $can_remove_approval;

        return $this;
    }

    /**
     * Gets can_rename
     *
     * @return ?bool
     */
    public function getCanRename()
    {
        return $this->container['can_rename'];
    }

    /**
     * Sets can_rename
     *
     * @param ?bool $can_rename can_rename
     *
     * @return $this
     */
    public function setCanRename($can_rename)
    {
        $this->container['can_rename'] = $can_rename;

        return $this;
    }

    /**
     * Gets can_share
     *
     * @return ?bool
     */
    public function getCanShare()
    {
        return $this->container['can_share'];
    }

    /**
     * Sets can_share
     *
     * @param ?bool $can_share can_share
     *
     * @return $this
     */
    public function setCanShare($can_share)
    {
        $this->container['can_share'] = $can_share;

        return $this;
    }

    /**
     * Gets can_view_activity
     *
     * @return ?bool
     */
    public function getCanViewActivity()
    {
        return $this->container['can_view_activity'];
    }

    /**
     * Sets can_view_activity
     *
     * @param ?bool $can_view_activity can_view_activity
     *
     * @return $this
     */
    public function setCanViewActivity($can_view_activity)
    {
        $this->container['can_view_activity'] = $can_view_activity;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

