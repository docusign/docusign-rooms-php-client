<?php
/**
 * TaskSummary
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  DocuSign\Rooms
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * DocuSign Rooms API - v2
 *
 * An API for an integrator to access the features of DocuSign Rooms
 *
 * OpenAPI spec version: v2
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.13-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace DocuSign\Rooms\Model;

use \ArrayAccess;
use DocuSign\Rooms\ObjectSerializer;

/**
 * TaskSummary Class Doc Comment
 *
 * @category    Class
 * @package     DocuSign\Rooms
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class TaskSummary implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TaskSummary';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'task_id' => '?int',
        'name' => '?string',
        'requires_approval' => '?bool',
        'due_date_type_id' => '?string',
        'due_date_offset' => '?int',
        'fixed_due_date' => '\DateTime',
        'owner_user_id' => '?int',
        'completion_date' => '\DateTime',
        'approval_date' => '\DateTime',
        'rejected_date' => '\DateTime',
        'created_date' => '\DateTime',
        'is_document_task' => '?bool',
        'requires_review' => '?bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'task_id' => 'int32',
        'name' => null,
        'requires_approval' => null,
        'due_date_type_id' => null,
        'due_date_offset' => 'int32',
        'fixed_due_date' => 'date-time',
        'owner_user_id' => 'int32',
        'completion_date' => 'date-time',
        'approval_date' => 'date-time',
        'rejected_date' => 'date-time',
        'created_date' => 'date-time',
        'is_document_task' => null,
        'requires_review' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'task_id' => 'taskId',
        'name' => 'name',
        'requires_approval' => 'requiresApproval',
        'due_date_type_id' => 'dueDateTypeId',
        'due_date_offset' => 'dueDateOffset',
        'fixed_due_date' => 'fixedDueDate',
        'owner_user_id' => 'ownerUserId',
        'completion_date' => 'completionDate',
        'approval_date' => 'approvalDate',
        'rejected_date' => 'rejectedDate',
        'created_date' => 'createdDate',
        'is_document_task' => 'isDocumentTask',
        'requires_review' => 'requiresReview'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'task_id' => 'setTaskId',
        'name' => 'setName',
        'requires_approval' => 'setRequiresApproval',
        'due_date_type_id' => 'setDueDateTypeId',
        'due_date_offset' => 'setDueDateOffset',
        'fixed_due_date' => 'setFixedDueDate',
        'owner_user_id' => 'setOwnerUserId',
        'completion_date' => 'setCompletionDate',
        'approval_date' => 'setApprovalDate',
        'rejected_date' => 'setRejectedDate',
        'created_date' => 'setCreatedDate',
        'is_document_task' => 'setIsDocumentTask',
        'requires_review' => 'setRequiresReview'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'task_id' => 'getTaskId',
        'name' => 'getName',
        'requires_approval' => 'getRequiresApproval',
        'due_date_type_id' => 'getDueDateTypeId',
        'due_date_offset' => 'getDueDateOffset',
        'fixed_due_date' => 'getFixedDueDate',
        'owner_user_id' => 'getOwnerUserId',
        'completion_date' => 'getCompletionDate',
        'approval_date' => 'getApprovalDate',
        'rejected_date' => 'getRejectedDate',
        'created_date' => 'getCreatedDate',
        'is_document_task' => 'getIsDocumentTask',
        'requires_review' => 'getRequiresReview'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['task_id'] = isset($data['task_id']) ? $data['task_id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['requires_approval'] = isset($data['requires_approval']) ? $data['requires_approval'] : null;
        $this->container['due_date_type_id'] = isset($data['due_date_type_id']) ? $data['due_date_type_id'] : null;
        $this->container['due_date_offset'] = isset($data['due_date_offset']) ? $data['due_date_offset'] : null;
        $this->container['fixed_due_date'] = isset($data['fixed_due_date']) ? $data['fixed_due_date'] : null;
        $this->container['owner_user_id'] = isset($data['owner_user_id']) ? $data['owner_user_id'] : null;
        $this->container['completion_date'] = isset($data['completion_date']) ? $data['completion_date'] : null;
        $this->container['approval_date'] = isset($data['approval_date']) ? $data['approval_date'] : null;
        $this->container['rejected_date'] = isset($data['rejected_date']) ? $data['rejected_date'] : null;
        $this->container['created_date'] = isset($data['created_date']) ? $data['created_date'] : null;
        $this->container['is_document_task'] = isset($data['is_document_task']) ? $data['is_document_task'] : null;
        $this->container['requires_review'] = isset($data['requires_review']) ? $data['requires_review'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets task_id
     *
     * @return ?int
     */
    public function getTaskId()
    {
        return $this->container['task_id'];
    }

    /**
     * Sets task_id
     *
     * @param ?int $task_id task_id
     *
     * @return $this
     */
    public function setTaskId($task_id)
    {
        $this->container['task_id'] = $task_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return ?string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param ?string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets requires_approval
     *
     * @return ?bool
     */
    public function getRequiresApproval()
    {
        return $this->container['requires_approval'];
    }

    /**
     * Sets requires_approval
     *
     * @param ?bool $requires_approval requires_approval
     *
     * @return $this
     */
    public function setRequiresApproval($requires_approval)
    {
        $this->container['requires_approval'] = $requires_approval;

        return $this;
    }

    /**
     * Gets due_date_type_id
     *
     * @return ?string
     */
    public function getDueDateTypeId()
    {
        return $this->container['due_date_type_id'];
    }

    /**
     * Sets due_date_type_id
     *
     * @param ?string $due_date_type_id due_date_type_id
     *
     * @return $this
     */
    public function setDueDateTypeId($due_date_type_id)
    {
        $this->container['due_date_type_id'] = $due_date_type_id;

        return $this;
    }

    /**
     * Gets due_date_offset
     *
     * @return ?int
     */
    public function getDueDateOffset()
    {
        return $this->container['due_date_offset'];
    }

    /**
     * Sets due_date_offset
     *
     * @param ?int $due_date_offset due_date_offset
     *
     * @return $this
     */
    public function setDueDateOffset($due_date_offset)
    {
        $this->container['due_date_offset'] = $due_date_offset;

        return $this;
    }

    /**
     * Gets fixed_due_date
     *
     * @return \DateTime
     */
    public function getFixedDueDate()
    {
        return $this->container['fixed_due_date'];
    }

    /**
     * Sets fixed_due_date
     *
     * @param \DateTime $fixed_due_date fixed_due_date
     *
     * @return $this
     */
    public function setFixedDueDate($fixed_due_date)
    {
        $this->container['fixed_due_date'] = $fixed_due_date;

        return $this;
    }

    /**
     * Gets owner_user_id
     *
     * @return ?int
     */
    public function getOwnerUserId()
    {
        return $this->container['owner_user_id'];
    }

    /**
     * Sets owner_user_id
     *
     * @param ?int $owner_user_id owner_user_id
     *
     * @return $this
     */
    public function setOwnerUserId($owner_user_id)
    {
        $this->container['owner_user_id'] = $owner_user_id;

        return $this;
    }

    /**
     * Gets completion_date
     *
     * @return \DateTime
     */
    public function getCompletionDate()
    {
        return $this->container['completion_date'];
    }

    /**
     * Sets completion_date
     *
     * @param \DateTime $completion_date completion_date
     *
     * @return $this
     */
    public function setCompletionDate($completion_date)
    {
        $this->container['completion_date'] = $completion_date;

        return $this;
    }

    /**
     * Gets approval_date
     *
     * @return \DateTime
     */
    public function getApprovalDate()
    {
        return $this->container['approval_date'];
    }

    /**
     * Sets approval_date
     *
     * @param \DateTime $approval_date approval_date
     *
     * @return $this
     */
    public function setApprovalDate($approval_date)
    {
        $this->container['approval_date'] = $approval_date;

        return $this;
    }

    /**
     * Gets rejected_date
     *
     * @return \DateTime
     */
    public function getRejectedDate()
    {
        return $this->container['rejected_date'];
    }

    /**
     * Sets rejected_date
     *
     * @param \DateTime $rejected_date rejected_date
     *
     * @return $this
     */
    public function setRejectedDate($rejected_date)
    {
        $this->container['rejected_date'] = $rejected_date;

        return $this;
    }

    /**
     * Gets created_date
     *
     * @return \DateTime
     */
    public function getCreatedDate()
    {
        return $this->container['created_date'];
    }

    /**
     * Sets created_date
     *
     * @param \DateTime $created_date created_date
     *
     * @return $this
     */
    public function setCreatedDate($created_date)
    {
        $this->container['created_date'] = $created_date;

        return $this;
    }

    /**
     * Gets is_document_task
     *
     * @return ?bool
     */
    public function getIsDocumentTask()
    {
        return $this->container['is_document_task'];
    }

    /**
     * Sets is_document_task
     *
     * @param ?bool $is_document_task is_document_task
     *
     * @return $this
     */
    public function setIsDocumentTask($is_document_task)
    {
        $this->container['is_document_task'] = $is_document_task;

        return $this;
    }

    /**
     * Gets requires_review
     *
     * @return ?bool
     */
    public function getRequiresReview()
    {
        return $this->container['requires_review'];
    }

    /**
     * Sets requires_review
     *
     * @param ?bool $requires_review requires_review
     *
     * @return $this
     */
    public function setRequiresReview($requires_review)
    {
        $this->container['requires_review'] = $requires_review;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

