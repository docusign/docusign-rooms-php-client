<?php
/**
 * ClassicManagerPermissions
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  DocuSign\Rooms
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * DocuSign Rooms API - v2
 *
 * An API for an integrator to access the features of DocuSign Rooms
 *
 * OpenAPI spec version: v2
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.13-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace DocuSign\Rooms\Model;

use \ArrayAccess;
use DocuSign\Rooms\ObjectSerializer;

/**
 * ClassicManagerPermissions Class Doc Comment
 *
 * @category    Class
 * @package     DocuSign\Rooms
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ClassicManagerPermissions implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ClassicManagerPermissions';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'is_visible_in_transaction_rooms' => '?bool',
        'can_delete_company_rooms' => '?bool',
        'can_delete_company_documents' => '?bool',
        'can_manage_company_rooms' => '?bool',
        'can_manage_company_account' => '?bool',
        'can_manage_company_shared_library' => '?bool',
        'can_manage_company_members' => '?bool',
        'can_close_company_rooms' => '?bool',
        'can_approve_company_checklists' => '?bool',
        'is_company_system_admin' => '?bool',
        'is_region_manager' => '?bool',
        'is_office_manager' => '?bool',
        'auto_access_to_company_rooms' => '?bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'is_visible_in_transaction_rooms' => null,
        'can_delete_company_rooms' => null,
        'can_delete_company_documents' => null,
        'can_manage_company_rooms' => null,
        'can_manage_company_account' => null,
        'can_manage_company_shared_library' => null,
        'can_manage_company_members' => null,
        'can_close_company_rooms' => null,
        'can_approve_company_checklists' => null,
        'is_company_system_admin' => null,
        'is_region_manager' => null,
        'is_office_manager' => null,
        'auto_access_to_company_rooms' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'is_visible_in_transaction_rooms' => 'isVisibleInTransactionRooms',
        'can_delete_company_rooms' => 'canDeleteCompanyRooms',
        'can_delete_company_documents' => 'canDeleteCompanyDocuments',
        'can_manage_company_rooms' => 'canManageCompanyRooms',
        'can_manage_company_account' => 'canManageCompanyAccount',
        'can_manage_company_shared_library' => 'canManageCompanySharedLibrary',
        'can_manage_company_members' => 'canManageCompanyMembers',
        'can_close_company_rooms' => 'canCloseCompanyRooms',
        'can_approve_company_checklists' => 'canApproveCompanyChecklists',
        'is_company_system_admin' => 'isCompanySystemAdmin',
        'is_region_manager' => 'isRegionManager',
        'is_office_manager' => 'isOfficeManager',
        'auto_access_to_company_rooms' => 'autoAccessToCompanyRooms'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'is_visible_in_transaction_rooms' => 'setIsVisibleInTransactionRooms',
        'can_delete_company_rooms' => 'setCanDeleteCompanyRooms',
        'can_delete_company_documents' => 'setCanDeleteCompanyDocuments',
        'can_manage_company_rooms' => 'setCanManageCompanyRooms',
        'can_manage_company_account' => 'setCanManageCompanyAccount',
        'can_manage_company_shared_library' => 'setCanManageCompanySharedLibrary',
        'can_manage_company_members' => 'setCanManageCompanyMembers',
        'can_close_company_rooms' => 'setCanCloseCompanyRooms',
        'can_approve_company_checklists' => 'setCanApproveCompanyChecklists',
        'is_company_system_admin' => 'setIsCompanySystemAdmin',
        'is_region_manager' => 'setIsRegionManager',
        'is_office_manager' => 'setIsOfficeManager',
        'auto_access_to_company_rooms' => 'setAutoAccessToCompanyRooms'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'is_visible_in_transaction_rooms' => 'getIsVisibleInTransactionRooms',
        'can_delete_company_rooms' => 'getCanDeleteCompanyRooms',
        'can_delete_company_documents' => 'getCanDeleteCompanyDocuments',
        'can_manage_company_rooms' => 'getCanManageCompanyRooms',
        'can_manage_company_account' => 'getCanManageCompanyAccount',
        'can_manage_company_shared_library' => 'getCanManageCompanySharedLibrary',
        'can_manage_company_members' => 'getCanManageCompanyMembers',
        'can_close_company_rooms' => 'getCanCloseCompanyRooms',
        'can_approve_company_checklists' => 'getCanApproveCompanyChecklists',
        'is_company_system_admin' => 'getIsCompanySystemAdmin',
        'is_region_manager' => 'getIsRegionManager',
        'is_office_manager' => 'getIsOfficeManager',
        'auto_access_to_company_rooms' => 'getAutoAccessToCompanyRooms'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['is_visible_in_transaction_rooms'] = isset($data['is_visible_in_transaction_rooms']) ? $data['is_visible_in_transaction_rooms'] : null;
        $this->container['can_delete_company_rooms'] = isset($data['can_delete_company_rooms']) ? $data['can_delete_company_rooms'] : null;
        $this->container['can_delete_company_documents'] = isset($data['can_delete_company_documents']) ? $data['can_delete_company_documents'] : null;
        $this->container['can_manage_company_rooms'] = isset($data['can_manage_company_rooms']) ? $data['can_manage_company_rooms'] : null;
        $this->container['can_manage_company_account'] = isset($data['can_manage_company_account']) ? $data['can_manage_company_account'] : null;
        $this->container['can_manage_company_shared_library'] = isset($data['can_manage_company_shared_library']) ? $data['can_manage_company_shared_library'] : null;
        $this->container['can_manage_company_members'] = isset($data['can_manage_company_members']) ? $data['can_manage_company_members'] : null;
        $this->container['can_close_company_rooms'] = isset($data['can_close_company_rooms']) ? $data['can_close_company_rooms'] : null;
        $this->container['can_approve_company_checklists'] = isset($data['can_approve_company_checklists']) ? $data['can_approve_company_checklists'] : null;
        $this->container['is_company_system_admin'] = isset($data['is_company_system_admin']) ? $data['is_company_system_admin'] : null;
        $this->container['is_region_manager'] = isset($data['is_region_manager']) ? $data['is_region_manager'] : null;
        $this->container['is_office_manager'] = isset($data['is_office_manager']) ? $data['is_office_manager'] : null;
        $this->container['auto_access_to_company_rooms'] = isset($data['auto_access_to_company_rooms']) ? $data['auto_access_to_company_rooms'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets is_visible_in_transaction_rooms
     *
     * @return ?bool
     */
    public function getIsVisibleInTransactionRooms()
    {
        return $this->container['is_visible_in_transaction_rooms'];
    }

    /**
     * Sets is_visible_in_transaction_rooms
     *
     * @param ?bool $is_visible_in_transaction_rooms is_visible_in_transaction_rooms
     *
     * @return $this
     */
    public function setIsVisibleInTransactionRooms($is_visible_in_transaction_rooms)
    {
        $this->container['is_visible_in_transaction_rooms'] = $is_visible_in_transaction_rooms;

        return $this;
    }

    /**
     * Gets can_delete_company_rooms
     *
     * @return ?bool
     */
    public function getCanDeleteCompanyRooms()
    {
        return $this->container['can_delete_company_rooms'];
    }

    /**
     * Sets can_delete_company_rooms
     *
     * @param ?bool $can_delete_company_rooms can_delete_company_rooms
     *
     * @return $this
     */
    public function setCanDeleteCompanyRooms($can_delete_company_rooms)
    {
        $this->container['can_delete_company_rooms'] = $can_delete_company_rooms;

        return $this;
    }

    /**
     * Gets can_delete_company_documents
     *
     * @return ?bool
     */
    public function getCanDeleteCompanyDocuments()
    {
        return $this->container['can_delete_company_documents'];
    }

    /**
     * Sets can_delete_company_documents
     *
     * @param ?bool $can_delete_company_documents can_delete_company_documents
     *
     * @return $this
     */
    public function setCanDeleteCompanyDocuments($can_delete_company_documents)
    {
        $this->container['can_delete_company_documents'] = $can_delete_company_documents;

        return $this;
    }

    /**
     * Gets can_manage_company_rooms
     *
     * @return ?bool
     */
    public function getCanManageCompanyRooms()
    {
        return $this->container['can_manage_company_rooms'];
    }

    /**
     * Sets can_manage_company_rooms
     *
     * @param ?bool $can_manage_company_rooms can_manage_company_rooms
     *
     * @return $this
     */
    public function setCanManageCompanyRooms($can_manage_company_rooms)
    {
        $this->container['can_manage_company_rooms'] = $can_manage_company_rooms;

        return $this;
    }

    /**
     * Gets can_manage_company_account
     *
     * @return ?bool
     */
    public function getCanManageCompanyAccount()
    {
        return $this->container['can_manage_company_account'];
    }

    /**
     * Sets can_manage_company_account
     *
     * @param ?bool $can_manage_company_account can_manage_company_account
     *
     * @return $this
     */
    public function setCanManageCompanyAccount($can_manage_company_account)
    {
        $this->container['can_manage_company_account'] = $can_manage_company_account;

        return $this;
    }

    /**
     * Gets can_manage_company_shared_library
     *
     * @return ?bool
     */
    public function getCanManageCompanySharedLibrary()
    {
        return $this->container['can_manage_company_shared_library'];
    }

    /**
     * Sets can_manage_company_shared_library
     *
     * @param ?bool $can_manage_company_shared_library can_manage_company_shared_library
     *
     * @return $this
     */
    public function setCanManageCompanySharedLibrary($can_manage_company_shared_library)
    {
        $this->container['can_manage_company_shared_library'] = $can_manage_company_shared_library;

        return $this;
    }

    /**
     * Gets can_manage_company_members
     *
     * @return ?bool
     */
    public function getCanManageCompanyMembers()
    {
        return $this->container['can_manage_company_members'];
    }

    /**
     * Sets can_manage_company_members
     *
     * @param ?bool $can_manage_company_members can_manage_company_members
     *
     * @return $this
     */
    public function setCanManageCompanyMembers($can_manage_company_members)
    {
        $this->container['can_manage_company_members'] = $can_manage_company_members;

        return $this;
    }

    /**
     * Gets can_close_company_rooms
     *
     * @return ?bool
     */
    public function getCanCloseCompanyRooms()
    {
        return $this->container['can_close_company_rooms'];
    }

    /**
     * Sets can_close_company_rooms
     *
     * @param ?bool $can_close_company_rooms can_close_company_rooms
     *
     * @return $this
     */
    public function setCanCloseCompanyRooms($can_close_company_rooms)
    {
        $this->container['can_close_company_rooms'] = $can_close_company_rooms;

        return $this;
    }

    /**
     * Gets can_approve_company_checklists
     *
     * @return ?bool
     */
    public function getCanApproveCompanyChecklists()
    {
        return $this->container['can_approve_company_checklists'];
    }

    /**
     * Sets can_approve_company_checklists
     *
     * @param ?bool $can_approve_company_checklists can_approve_company_checklists
     *
     * @return $this
     */
    public function setCanApproveCompanyChecklists($can_approve_company_checklists)
    {
        $this->container['can_approve_company_checklists'] = $can_approve_company_checklists;

        return $this;
    }

    /**
     * Gets is_company_system_admin
     *
     * @return ?bool
     */
    public function getIsCompanySystemAdmin()
    {
        return $this->container['is_company_system_admin'];
    }

    /**
     * Sets is_company_system_admin
     *
     * @param ?bool $is_company_system_admin is_company_system_admin
     *
     * @return $this
     */
    public function setIsCompanySystemAdmin($is_company_system_admin)
    {
        $this->container['is_company_system_admin'] = $is_company_system_admin;

        return $this;
    }

    /**
     * Gets is_region_manager
     *
     * @return ?bool
     */
    public function getIsRegionManager()
    {
        return $this->container['is_region_manager'];
    }

    /**
     * Sets is_region_manager
     *
     * @param ?bool $is_region_manager is_region_manager
     *
     * @return $this
     */
    public function setIsRegionManager($is_region_manager)
    {
        $this->container['is_region_manager'] = $is_region_manager;

        return $this;
    }

    /**
     * Gets is_office_manager
     *
     * @return ?bool
     */
    public function getIsOfficeManager()
    {
        return $this->container['is_office_manager'];
    }

    /**
     * Sets is_office_manager
     *
     * @param ?bool $is_office_manager is_office_manager
     *
     * @return $this
     */
    public function setIsOfficeManager($is_office_manager)
    {
        $this->container['is_office_manager'] = $is_office_manager;

        return $this;
    }

    /**
     * Gets auto_access_to_company_rooms
     *
     * @return ?bool
     */
    public function getAutoAccessToCompanyRooms()
    {
        return $this->container['auto_access_to_company_rooms'];
    }

    /**
     * Sets auto_access_to_company_rooms
     *
     * @param ?bool $auto_access_to_company_rooms auto_access_to_company_rooms
     *
     * @return $this
     */
    public function setAutoAccessToCompanyRooms($auto_access_to_company_rooms)
    {
        $this->container['auto_access_to_company_rooms'] = $auto_access_to_company_rooms;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

